Object subclass: #Notebook	instanceVariableNames: 'id notas'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 2-Ejercicio 4'!!Notebook commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	id:		<Object>	notas:		<Object>    Implementation Points!!Notebook methodsFor: 'accessing' stamp: 'bys 4/14/2016 12:23'!tamanio	^self notas inject: 0 into: [ :suma :nota | suma + nota tamanio ]! !!Notebook methodsFor: 'accessing' stamp: 'bys 4/14/2016 13:01'!= otraNote	^(self id = otraNote id)! !!Notebook methodsFor: 'accessing' stamp: 'bys 4/14/2016 11:26'!id: anObject	id := anObject! !!Notebook methodsFor: 'accessing' stamp: 'bys 4/14/2016 10:59'!notas: anObject	notas := anObject! !!Notebook methodsFor: 'accessing' stamp: 'bys 4/14/2016 11:18'!agregarNota: unaNota	(self notas includes: unaNota)	ifTrue: [ 		Transcript clear; show: 'Esa nota ya existe!!'.		^false ]	ifFalse: [ 		Transcript clear; show: 'La nota se agrego exitosamente!!'.		self notas add: unaNota.		^false ]! !!Notebook methodsFor: 'accessing' stamp: 'bys 4/14/2016 11:21'!eliminarNota: unaNota	self notas remove: unaNota	ifAbsent: [ 		Transcript clear; show: 'Esa nota no existe!!'.		^false ].	Transcript clear; show: 'La nota se agrego exitosamente!!'.	^true! !!Notebook methodsFor: 'accessing' stamp: 'bys 4/14/2016 13:13'!buscarNotasPorTitulo: unTitulo	^self notas select: [ :nota | nota titulo = unTitulo ]! !!Notebook methodsFor: 'accessing' stamp: 'bys 4/14/2016 11:00'!initialize	notas:= SortedCollection new sortBlock: [ :n1 :n2 | n1 fecha < n2 fecha ]! !!Notebook methodsFor: 'accessing' stamp: 'bys 4/14/2016 13:14'!buscarNotasPorFecha: unaFecha	^self notas select: [ :nota | nota fecha = unaFecha ]! !!Notebook methodsFor: 'accessing' stamp: 'bys 4/14/2016 11:26'!id	^ id! !!Notebook methodsFor: 'accessing' stamp: 'bys 4/14/2016 10:59'!notas	^ notas! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Notebook class	instanceVariableNames: ''!!Notebook class methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 11:23'!new: unID	^self new 	id: unID! !TestCase subclass: #TestEvernote	instanceVariableNames: 'en note nota tags tam'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 2-Ejercicio 4'!!TestEvernote methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 13:12'!testBuscarPorTitulo	en agregarNota: nota en: note.	self deny: (en buscarPorTitulo: 'TestNota')isEmpty! !!TestEvernote methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 12:11'!testBorrarNota	note notas add: nota.	en notebooks add: note.	en borrarNota: nota.	self assert: ((en buscarNotebook: note) notas size) = 0! !!TestEvernote methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 12:58'!testCrearNota	en crearNota: 'TestTitulo' fecha: (DateAndTime today) tags: tags contenido: 'Texto contenido para test' en: note.	self assert: ((en buscarNotebook: note)notas size) = 1! !!TestEvernote methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 13:14'!testBuscarPorFecha	en agregarNota: nota en: note.	self assert: ((en buscarPorFecha: DateAndTime today)size) = 1! !!TestEvernote methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 12:27'!testTamanioNote	note notas add: nota.	en notebooks add: note.	self assert: (en tamanioNotebook: note) = tam! !!TestEvernote methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 13:06'!testBuscarPorNotebook	en agregarNota: nota en: note.	self deny: ((en buscarPorNotebook: note)isEmpty)! !!TestEvernote methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 12:58'!setUp	tags:= OrderedCollection new.	tags add: 'wea'; add: 'weitas'.	nota:= Nota new: 'TestNota' fecha: (DateAndTime today) tags: tags contenido: 'nota test prueba'.	note:= Notebook new.	en:= EvernOOte new.	en agregarNotebook: note.	tam:= nota tamanio.! !Object subclass: #EvernOOte	instanceVariableNames: 'notebooks'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 2-Ejercicio 4'!!EvernOOte commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	notebooks:		<Object>    Implementation Points!!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 13:11'!buscarPorTitulo: unTitulo	|n|	n:= OrderedCollection new.	self notebooks do: [ :note | 		n addFrom: (note buscarNotas: unTitulo)		].	^n! !!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 12:27'!tamanioNotebook: unaNote	^(self buscarNotebook: unaNote) tamanio ! !!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 13:14'!buscarPorFecha: unTitulo	|n|	n:= OrderedCollection new.	self notebooks do: [ :note | 		n addFrom: (note buscarNotasPorFecha: unTitulo)		].	^n! !!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 12:11'!borrarNota: unaNota	self notebooks do: [ :note |		note notas remove: unaNota ifAbsent: [  ]		 ]	! !!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 11:37'!borrarNota: unaNota de: unaNote	(self notebooks includes: unaNote)	ifTrue: [ 		unaNote borrarNota: unaNota.		^true		 ]	ifFalse: [ 		Transcript clear; show: 'Esa Notebook no existe.'.		^false		 ]! !!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 11:01'!initialize	notebooks:= OrderedCollection new! !!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 12:06'!buscarNotebook: unaNote	(self notebooks includes: unaNote)	ifTrue: [ 		^self notebooks detect: [ :n | n = unaNote].		 ]	ifFalse: [ 		Transcript clear; show: 'Esa Notebook no existe.'.		^false		 ]! !!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 11:36'!agregarNota: unaNota en: unaNote	(self notebooks includes: unaNote)	ifTrue: [ 		unaNote agregarNota: unaNota.		^true		 ]	ifFalse: [ 		Transcript clear; show: 'Esa Notebook no existe.'.		^false		 ]! !!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 10:59'!notebooks	^ notebooks! !!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 12:52'!agregarNotebook: unaNote	(self notebooks includes: unaNote)	ifFalse: [		unaNote id: self notebooks size.		self notebooks add: unaNote.		^true		 ]	ifTrue: [ 		Transcript clear; show: 'Esa Notebook ya existe.'.		^false		 ]! !!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 12:00'!crearNota: unTitulo fecha: unaFecha tags: tags contenido: unTexto en: unaNote	^self agregarNota: (Nota new: unTitulo fecha: unaFecha tags: tags contenido: unTexto) en: unaNote! !!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 10:59'!notebooks: anObject	notebooks := anObject! !!EvernOOte methodsFor: 'accessing' stamp: 'bys 4/14/2016 13:06'!buscarPorNotebook: unaNote	|n|	n:= OrderedCollection new.	n addFrom: (self notebooks detect: [ :note | note = unaNote]) notas.	^n! !Object subclass: #Nota	instanceVariableNames: 'titulo fecha tags contenido'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 2-Ejercicio 4'!!Nota commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contenido:		<Object>	fecha:		<Object>	tags:		<Object>	titulo:		<Object>    Implementation Points!!Nota methodsFor: 'accessing' stamp: 'bys 4/14/2016 10:59'!titulo: anObject	titulo := anObject! !!Nota methodsFor: 'accessing' stamp: 'bys 4/14/2016 10:59'!tags: anObject	tags := anObject! !!Nota methodsFor: 'accessing' stamp: 'bys 4/14/2016 11:22'!= otraNota	^(self titulo = otraNota titulo) & (self fecha = otraNota fecha)! !!Nota methodsFor: 'accessing' stamp: 'bys 4/14/2016 10:59'!contenido: anObject	contenido := anObject! !!Nota methodsFor: 'accessing' stamp: 'bys 4/14/2016 10:59'!tags	^ tags! !!Nota methodsFor: 'accessing' stamp: 'bys 4/14/2016 12:23'!tamanioTags	^self tags inject: 0 into: [ :suma :tag | suma + tag size ]! !!Nota methodsFor: 'accessing' stamp: 'bys 4/14/2016 12:28'!tamanio	|t|	t:=0.	t:= t + self titulo size.	t:= t + self contenido size.	t:= t + self tamanioTags.	^t! !!Nota methodsFor: 'accessing' stamp: 'bys 4/14/2016 10:59'!titulo	^ titulo! !!Nota methodsFor: 'accessing' stamp: 'bys 4/14/2016 10:59'!contenido	^ contenido! !!Nota methodsFor: 'accessing' stamp: 'bys 4/14/2016 10:59'!fecha	^ fecha! !!Nota methodsFor: 'accessing' stamp: 'bys 4/14/2016 10:59'!fecha: anObject	fecha := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Nota class	instanceVariableNames: ''!!Nota class methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 10:59'!new: unTitulo fecha: unaFecha tags: tags contenido: unTexto	^self new	titulo: unTitulo;	fecha: unaFecha;	tags: tags;	contenido: unTexto.! !