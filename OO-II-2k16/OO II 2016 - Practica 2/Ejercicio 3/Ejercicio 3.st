Object subclass: #Autor	instanceVariableNames: 'nombre albumes'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 2-Ejercicio 3'!!Autor commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	albumes:		<Object>	nombre:		<Object>    Implementation Points!!Autor methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:23'!initialize	albumes:= OrderedCollection new! !!Autor methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!albumes	^ albumes! !!Autor methodsFor: 'accessing' stamp: 'bys 4/14/2016 00:19'!seleccionarAlbum: unNombreDeAlbum	^self albumes select: [ :alb | alb nombre = unNombreDeAlbum ]! !!Autor methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!nombre: anObject	nombre := anObject! !!Autor methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!albumes: anObject	albumes := anObject! !!Autor methodsFor: 'accessing' stamp: 'bys 4/14/2016 00:25'!listaCanciones	|c|	c:= OrderedCollection new.	self albumes do: [ :a1 | c addFrom: a1 canciones ].	^c	! !!Autor methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!nombre	^ nombre! !!Autor methodsFor: 'as yet unclassified' stamp: 'bys 4/13/2016 20:14'!= otroAutor	^self nombre = otroAutor nombre! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Autor class	instanceVariableNames: ''!!Autor class methodsFor: 'as yet unclassified' stamp: 'bys 4/13/2016 22:28'!new: unNombre	^self new	nombre: unNombre! !TestCase subclass: #TestSpotify	instanceVariableNames: 'spotify user autor album cancion'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 2-Ejercicio 3'!!TestSpotify methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 00:38'!testBuscarPorTitulo	album canciones add: cancion .	autor albumes add: album.	spotify autores add: autor.	self assert: ((spotify buscarPorTitulo: cancion nombre)size = 1).	self deny: ((spotify buscarPorTitulo: 'No existe')size = 1)! !!TestSpotify methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 00:02'!testBuscarPorAutor	album canciones add: cancion .	autor albumes add: album.	spotify autores add: autor.	self assert: ((spotify buscarPorAutor: autor nombre)size = 1).	self deny: ((spotify buscarPorAutor: 'No existe')size = 1)! !!TestSpotify methodsFor: 'as yet unclassified' stamp: 'bys 4/13/2016 23:53'!testEliminarCancion	user myMusic add: cancion.	user eliminar: cancion.	self assert: ((user myMusic)size = 0).! !!TestSpotify methodsFor: 'as yet unclassified' stamp: 'bys 4/13/2016 19:58'!testAgregarCancion	user agregar: cancion .	self assert: ((user myMusic)size = 1).! !!TestSpotify methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 00:36'!testBuscarPorAlbum	album canciones add: cancion .	autor albumes add: album.	spotify autores add: autor.	self assert: ((spotify buscarPorAlbum: album nombre)size = 1).	self deny: ((spotify buscarPorAlbum: 'No existe')size = 1)! !!TestSpotify methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 00:04'!setUp	"Inicializacion de variables"	spotify:= Spotify new.	user:= User new: 'userTest' nom: 'testUser1' ap: 'TEST1'.	autor:= Autor new: 'Autor1Test'.	album:= Album new: 'Album1Test' autor: autor.	cancion:= Cancion new: 'Cancion1Test' genero: 'GeneroTest' duracion: '00:00' album: album.		"Preparacion de test"		spotify users add: user.	! !Object subclass: #User	instanceVariableNames: 'username nombre apellido myMusic'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 2-Ejercicio 3'!!User commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	apellido:		<Object>	myMusic:		<Object>	nombre:		<Object>	username:		<Object>    Implementation Points!!User methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:15'!nombre	^ nombre! !!User methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:15'!apellido	^ apellido! !!User methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:15'!myMusic: anObject	myMusic := anObject! !!User methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:17'!initialize	myMusic:= OrderedCollection new! !!User methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:15'!username	^ username! !!User methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:15'!apellido: anObject	apellido := anObject! !!User methodsFor: 'accessing' stamp: 'bys 4/13/2016 23:51'!agregar: unaCancion	(self myMusic includes: unaCancion)	ifTrue: [ 		Transcript clear; show:'Esa cancion ya existe en la wea'.		^false ]	ifFalse: [ 		Transcript clear; show:'La cancion se agrego exitosamente a tu musik'.		self myMusic add: unaCancion.		^true ]! !!User methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:15'!nombre: anObject	nombre := anObject! !!User methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:15'!myMusic	^ myMusic! !!User methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:15'!username: anObject	username := anObject! !!User methodsFor: 'accessing' stamp: 'bys 4/13/2016 23:56'!eliminar: unaCancion	self myMusic remove: unaCancion	ifAbsent: [ 		Transcript clear; show:'Esa cancion no existe en la wea'.		^false ].	Transcript clear; show:'La cancion se elimino exitosamente de tu musik'.	^true ! !!User methodsFor: 'as yet unclassified' stamp: 'bys 4/13/2016 20:15'!= otroUser	^self username = otroUser username! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: ''!!User class methodsFor: 'as yet unclassified' stamp: 'bys 4/13/2016 20:36'!new: unUsername nom: unNombre ap: unApellido	^self new	username: unUsername ;	nombre: unNombre ;	apellido: unApellido ! !Object subclass: #Album	instanceVariableNames: 'nombre autor canciones'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 2-Ejercicio 3'!!Album commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	autor:		<Object>	canciones:		<Object>	nombre:		<Object>    Implementation Points!!Album methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:23'!initialize	canciones:= OrderedCollection new! !!Album methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!autor: anObject	autor := anObject! !!Album methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!autor	^ autor! !!Album methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!canciones: anObject	canciones := anObject! !!Album methodsFor: 'accessing' stamp: 'bys 4/13/2016 21:29'!canciones	^canciones! !!Album methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!nombre: anObject	nombre := anObject! !!Album methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!nombre	^ nombre! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Album class	instanceVariableNames: ''!!Album class methodsFor: 'as yet unclassified' stamp: 'bys 4/14/2016 00:04'!new: unNombre autor: unAutor	^self new	nombre: unNombre;	autor: unAutor! !Object subclass: #Spotify	instanceVariableNames: 'autores users'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 2-Ejercicio 3'!!Spotify commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	autores:		<Object>	users:		<Object>    Implementation Points!!Spotify methodsFor: 'inicializador' stamp: 'bys 4/13/2016 19:28'!initialize	users:= OrderedCollection new.	autores:= SortedCollection new sortBlock: [ :a1 :a2 | a1 nombre < a2 nombre ].! !!Spotify methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:15'!autores	^ autores! !!Spotify methodsFor: 'accessing' stamp: 'bys 4/14/2016 00:45'!buscarPorTitulo: unString	|c|	c:= OrderedCollection new.	(self autores) 		do: [ :aut | (aut albumes) 							do: [ :alb | c addFrom: (alb canciones select: [ :song | song nombre = unString])			]		].	^c! !!Spotify methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:15'!autores: anObject	autores := anObject! !!Spotify methodsFor: 'accessing' stamp: 'bys 4/14/2016 00:37'!buscarPorAlbum: unString	|c|	c:= OrderedCollection new.	self autores do: [ :aut | 		(aut albumes select: [ :alb | alb nombre = unString ]) 			do: [ :alb | c addFrom: alb canciones ]				].	^c! !!Spotify methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:15'!users: anObject	users := anObject! !!Spotify methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:42'!eliminarUsuario: unUser	self users remove: unUser 	ifAbsent: [ 		Transcript clear; show: 'El usuario no existe.'.		^false		]	Transcript clear; show: 'Ese usuario se elimino correctamente.'.	^true	! !!Spotify methodsFor: 'accessing' stamp: 'bys 4/14/2016 00:26'!buscarPorAutor: unString	|c|	c:= OrderedCollection new.	(self autores select: [ :aut | aut nombre = unString ])		do: [ :aut | c addFrom: aut listaCanciones ].	^c! !!Spotify methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:15'!users	^ users! !!Spotify methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:31'!eliminarAutor: unAutor	(self autores includes: unAutor)	ifTrue: [ 		self autores remove: unAutor.		Transcript cr; show: 'El autor se elimino correctamente weon'.		^true		 ]	ifFalse: [ 		Transcript cr; show: 'Ese autor no existe weon'.				^false		]! !!Spotify methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:32'!agregarAutor: unAutor	(self autores includes: unAutor)	ifTrue: [ 		Transcript cr; show: 'Ese autor ya existe weon'.		^false		 ]	ifFalse: [		Transcript cr; show: 'El autor se agrego correctamente!!'.		self autores add: unAutor.		^true 		]! !!Spotify methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:38'!agregarUsuario: unUsername ap: unApellido nom: unNombre	|user|	user:= User new: unUsername nom: unNombre ap: unApellido.	(self users includes: user)	ifTrue: [ 		Transcript clear; show: 'Ese usuario ya existe.'.		^false ]	ifFalse: [ 		Transcript clear; show: 'El usuario se creo exitosamente weas.'. 		self users add: user.		^true		]! !Object subclass: #Cancion	instanceVariableNames: 'nombre genero duracion autor album'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 2-Ejercicio 3'!!Cancion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	album:		<Object>	autor:		<Object>	duracion:		<Object>	genero:		<Object>	nombre:		<Object>    Implementation Points!!Cancion methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!nombre	^ nombre! !!Cancion methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!duracion: anObject	duracion := anObject! !!Cancion methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!duracion	^ duracion! !!Cancion methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!album	^ album! !!Cancion methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!genero: anObject	genero := anObject! !!Cancion methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!nombre: anObject	nombre := anObject! !!Cancion methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!album: anObject	album := anObject! !!Cancion methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!genero	^ genero! !!Cancion methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!autor: anObject	autor := anObject! !!Cancion methodsFor: 'accessing' stamp: 'bys 4/13/2016 20:16'!autor	^ autor! !!Cancion methodsFor: 'as yet unclassified' stamp: 'bys 4/13/2016 20:11'!= otraCancion	^(((self nombre = otraCancion nombre) & (self autor = otraCancion autor)) & (self album = otraCancion album))! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cancion class	instanceVariableNames: ''!!Cancion class methodsFor: 'as yet unclassified' stamp: 'bys 4/13/2016 20:14'!new: unNombre genero: unGenero duracion: unTiempo album: unAlbum	^self new 	nombre: unNombre;	genero: unGenero;	duracion: unTiempo;	album: unAlbum;	autor: unAlbum autor.! !