Object subclass: #Topografia	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 3-Ejercicio 3'!!Topografia commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Topografia methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 23:01'!proporcionAgua	^self subclassResponsibility ! !!Topografia methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 23:01'!proporcionTierra	^1 - self proporcionAgua! !!Topografia methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 23:00'!igualDeTierra: otraTopografia	^self proporcionTierra = otraTopografia proporcionTierra! !!Topografia methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 23:02'!igualMixta: otraTopografia	^false! !!Topografia methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 23:02'!= otraTopografia	^self subclassResponsibility ! !!Topografia methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 22:59'!igualDeAgua: otraTopografia	^self proporcionAgua = otraTopografia proporcionAgua! !Topografia subclass: #TopografiaDeAgua	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 3-Ejercicio 3'!!TopografiaDeAgua commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TopografiaDeAgua methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 23:07'!proporcionAgua	^1! !!TopografiaDeAgua methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 23:06'!= otraTopografia	^otraTopografia igualDeAgua: self! !Topografia subclass: #TopografiaDeTierra	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 3-Ejercicio 3'!!TopografiaDeTierra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TopografiaDeTierra methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 23:05'!proporcionAgua	^0! !!TopografiaDeTierra methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 23:05'!= otraTopografia	^otraTopografia igualDeTierra: self! !Topografia subclass: #TopografiaMixta	instanceVariableNames: 'porciones'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 3-Ejercicio 3'!!TopografiaMixta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	porciones:		<Object>    Implementation Points!!TopografiaMixta methodsFor: 'accessing' stamp: 'bys 4/19/2016 23:17'!validarProporciones	^ (self proporcionAgua < 1) & (self proporcionTierra < 1)! !!TopografiaMixta methodsFor: 'accessing' stamp: 'bys 4/19/2016 23:08'!igualDeTierra: otraTopografia	^false! !!TopografiaMixta methodsFor: 'accessing' stamp: 'bys 4/19/2016 23:07'!porciones	^ porciones! !!TopografiaMixta methodsFor: 'accessing' stamp: 'bys 4/19/2016 23:15'!proporcionAgua	^(porciones inject: 0 into: [:total :porcion | 		total + porcion proporcionAgua]) / 4! !!TopografiaMixta methodsFor: 'accessing' stamp: 'bys 4/19/2016 23:07'!porciones: anObject	porciones := anObject! !!TopografiaMixta methodsFor: 'accessing' stamp: 'bys 4/19/2016 23:13'!igualMixta: otraTopografia	^porciones allSatisfy: [ :porcion | 		porcion = (otraTopografia porciones at: (porciones indexOf: porcion))				]! !!TopografiaMixta methodsFor: 'accessing' stamp: 'bys 4/19/2016 23:09'!= otraTopografia	^otraTopografia igualMixta: self! !!TopografiaMixta methodsFor: 'accessing' stamp: 'bys 4/19/2016 23:08'!igualDeAgua: otraTopografia	^false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TopografiaMixta class	instanceVariableNames: ''!!TopografiaMixta class methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 23:21'!p1: porcion1 p2: porcion2 p3: porcion3 p4: porcion4	|aux|. aux:= self new porciones: (Array with: porcion1														with: porcion2														with: porcion3														with: porcion4).	^ aux validarProporciones 		ifTrue: [ ^aux yourself ]		ifFalse: [ Transcript show: 'No se pudo construir correctamente porque fallo una de las porciones' ]	! !