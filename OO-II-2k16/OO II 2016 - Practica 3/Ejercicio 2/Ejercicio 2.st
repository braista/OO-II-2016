Object subclass: #Biblioteca	instanceVariableNames: 'socios exporter'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 3-Ejercicio 2'!!Biblioteca commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	exporter:		<Object>	socios:		<Object>    Implementation Points!!Biblioteca methodsFor: 'as yet unclassified' stamp: 'DiegoTowers 4/10/2016 16:17'!exportarSocios"Retorna la representacion JSON de la coleccion de socios."^ self exporter export:(self socios).! !!Biblioteca methodsFor: 'initialization' stamp: 'EmilianoPrez 4/7/2016 19:56'!initialize: anExporter	socios:= OrderedCollection new.	exporter:= anExporter.! !!Biblioteca methodsFor: 'initialization' stamp: 'EmilianoPrez 4/7/2016 19:44'!initialize	socios:= OrderedCollection new.	exporter:= VoorheesExporter new.! !!Biblioteca methodsFor: 'accessing' stamp: 'EmilianoPrez 4/7/2016 19:44'!socios	^ socios! !!Biblioteca methodsFor: 'accessing' stamp: 'EmilianoPrez 4/7/2016 19:44'!socios: anObject	socios := anObject! !!Biblioteca methodsFor: 'accessing' stamp: 'EmilianoPrez 4/7/2016 19:44'!exporter: anObject	exporter := anObject! !!Biblioteca methodsFor: 'accessing' stamp: 'EmilianoPrez 4/7/2016 19:44'!exporter	^ exporter! !!Biblioteca methodsFor: 'socios' stamp: 'EmilianoPrez 4/7/2016 19:41'!agregarSocio: aSocio 	socios add: aSocio.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Biblioteca class	instanceVariableNames: ''!!Biblioteca class methodsFor: 'as yet unclassified' stamp: 'EmilianoPrez 4/7/2016 19:55'!new: anExporter	^self new initialize: anExporter	! !Object subclass: #Socio	instanceVariableNames: 'nombre email legajo'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 3-Ejercicio 2'!!Socio commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	email:		<Object>	legajo:		<Object>	nombre:		<Object>    Implementation Points!!Socio methodsFor: 'initialization' stamp: 'EmilianoPrez 4/7/2016 19:40'!nombre: aString email: aString2 legajo: aString3 	nombre:= aString.	email:= aString2.	legajo:= aString3.! !!Socio methodsFor: 'accessing' stamp: 'EmilianoPrez 4/7/2016 19:45'!legajo: anObject	legajo := anObject! !!Socio methodsFor: 'accessing' stamp: 'EmilianoPrez 4/7/2016 19:45'!email	^ email! !!Socio methodsFor: 'accessing' stamp: 'EmilianoPrez 4/7/2016 19:45'!email: anObject	email := anObject! !!Socio methodsFor: 'accessing' stamp: 'EmilianoPrez 4/7/2016 19:45'!nombre: anObject	nombre := anObject! !!Socio methodsFor: 'accessing' stamp: 'EmilianoPrez 4/7/2016 19:45'!legajo	^ legajo! !!Socio methodsFor: 'accessing' stamp: 'EmilianoPrez 4/7/2016 19:45'!nombre	^ nombre! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Socio class	instanceVariableNames: ''!!Socio class methodsFor: 'creation' stamp: 'EmilianoPrez 4/7/2016 19:39'!nombre: aString email: aString2 legajo: aString3 	^self new nombre: aString email: aString2 legajo: aString3 ! !Object subclass: #VoorheesExporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 3-Ejercicio 2'!!VoorheesExporter commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!VoorheesExporter methodsFor: 'exporting' stamp: 'bys 4/19/2016 20:12'!exportSocio: aSocio	^self subclassResponsibility ! !!VoorheesExporter methodsFor: 'exporting' stamp: 'bys 4/19/2016 20:12'!export: socios 		^self subclassResponsibility ! !VoorheesExporter subclass: #JSONAdapter	instanceVariableNames: 'jSONadaptado'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 3-Ejercicio 2'!!JSONAdapter commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	jSONadaptado:		<Object>    Implementation Points!!JSONAdapter methodsFor: 'accessing' stamp: 'bys 4/19/2016 20:21'!exportSocio: unSocio	 ^(Dictionary new at: 'nombre' put: unSocio nombre;	at: 'email' put: unSocio email;	at: 'legajo' put: unSocio legajo; yourself)! !!JSONAdapter methodsFor: 'accessing' stamp: 'bys 4/19/2016 20:31'!export: socios	|col|	col:= OrderedCollection new.	socios do: [ :s1 |		col add: (self exportSocio: s1)		 ].	^(NeoJSONWriter toStringPretty: col)! !!JSONAdapter methodsFor: 'accessing' stamp: 'bys 4/19/2016 18:26'!jSONadaptado: anObject	jSONadaptado := anObject! !!JSONAdapter methodsFor: 'accessing' stamp: 'bys 4/19/2016 18:26'!jSONadaptado	^ jSONadaptado! !TestCase subclass: #BibliotecaTestCase	instanceVariableNames: 'miBiblioteca arya tyron'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 3-Ejercicio 2'!!BibliotecaTestCase methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 20:10'!setUpmiBiblioteca:= Biblioteca new: (JSONAdapter new).arya:= Socio nombre:'Arya Stark' email:'needle@stark.com' legajo: '5234/5'.tyron:= Socio nombre:'Tyron Lannister' email:'tyron@thelannisters.com' legajo:'2345/2'.miBiblioteca agregarSocio: arya.miBiblioteca agregarSocio: tyron.! !!BibliotecaTestCase methodsFor: 'as yet unclassified' stamp: 'EmilianoPrez 4/7/2016 19:42'!testExportar| result |result:= '[	{		"nombre" : "Arya Stark",		"email" : "needle@stark.com",		"legajo" : "5234/5"	},	{		"nombre" : "Tyron Lannister",		"email" : "tyron@thelannisters.com",		"legajo" : "2345/2"	}]'.self assert: (miBiblioteca exportarSocios = result).! !