Object subclass: #User	instanceVariableNames: 'fname lname occupation zipCode age friends movies moovies'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!User commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	apellido:		<Object>	myMusic:		<Object>	nombre:		<Object>	username:		<Object>    Implementation Points!!User methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 12:38'!rateMovie: aMovie value: unValor"Califica una pelicula existente con un valor entre 1 y 5 inclusive."	(self sawMovie: aMovie)	ifFalse: [ aMovie rate: (Rating new: unValor by: self).		self addMovie: aMovie.			]	! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!age	^ age! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!moovies: anObject	moovies := anObject! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!fname	^ fname! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!sawMovie: aMovie"Comprueba si el usuario vio la pelicula y retorna true o false"	^(self movies includes: aMovie)	! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!movies: anObject	movies := anObject! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!zipCode	^ zipCode! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!deleteFriend: anUser"Elimina un usuario de la lista de amigos."	(self isFriend: anUser)	ifTrue: [ anUser friends remove: self.		self friends remove: anUser		]	ifFalse: [ self error: 'No podes borrarlo porque no son ameos.' ]! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!movies	^ movies! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:44'!initialize	movies:= OrderedCollection new.	friends:= OrderedCollection new.! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!moovies	^ moovies! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!zipCode: anObject	zipCode := anObject! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!favouriteGenre	"Retorna el genero favorito del usuario."	|bag|	bag:= Bag new.	self movies do: [ :m |		m genres do: [ :g | bag add: g ]		 ].	^(bag sortedCounts)first value! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!addFriend: anUser"Agrega un usuario a la lista de amigos."	(self isFriend: anUser)	ifFalse: [ anUser friends add: self .		self friends add: (anUser)		]	ifTrue: [ self error: 'No podes agregarlo porque ya son amigos.' ]! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!addMovie: unaPeli"Agrega una pelicula a la lista de peliculas vistas por el usuario."	(self sawMovie: unaPeli)	ifFalse: [ self movies add: unaPeli]	! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!occupation: anObject	occupation := anObject! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!lname: anObject	lname := anObject! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:50'!= otroUser	^(self fname = otroUser fname) &	(self lname = otroUser lname) &	(self age = otroUser age) &	(self zipCode = otroUser zipCode) &	(self occupation = otroUser occupation)! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!friends	^ friends! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!occupation	^ occupation! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!age: anObject	age := anObject! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!fname: anObject	fname := anObject! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!friends: anObject	friends := anObject! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!lname	^ lname! !!User methodsFor: 'accessing' stamp: 'bys 5/12/2016 12:38'!isFriend: anUser"Comprueba si un usuario esta en la lista de ameos"	^(self friends includes: anUser)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: ''!!User class methodsFor: 'constructor' stamp: 'bys 5/12/2016 12:38'!fname: unNombre lname: unApellido age: unaFecha ocuppation: unaOcupacion zipCode: unCodigo app: aMoovies	^self new	fname: unNombre;	lname: unApellido;	age: unaFecha;	occupation: unaOcupacion;	zipCode: unCodigo;	moovies: aMoovies.! !Object subclass: #LoadData	instanceVariableNames: 'auxUsers auxMovies processor'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!LoadData commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!LoadData methodsFor: 'accessing' stamp: 'bys 5/4/2016 20:25'!auxMovies	^ auxMovies! !!LoadData methodsFor: 'accessing' stamp: 'bys 5/12/2016 13:50'!processor: anObject	processor := anObject! !!LoadData methodsFor: 'accessing' stamp: 'bys 5/4/2016 20:25'!auxMovies: anObject	auxMovies := anObject! !!LoadData methodsFor: 'accessing' stamp: 'bys 5/4/2016 20:24'!auxUsers	^ auxUsers! !!LoadData methodsFor: 'accessing' stamp: 'bys 5/12/2016 13:49'!processor	^ processor! !!LoadData methodsFor: 'accessing' stamp: 'bys 5/4/2016 20:24'!auxUsers: anObject	auxUsers := anObject! !!LoadData methodsFor: 'as yet unclassified' stamp: 'bys 5/11/2016 02:43'!findMovie: id"Retorna un usuario determinado si es que existe en la lista de usuarios."	^self auxMovies at: id ifAbsent: [ ^nil]! !!LoadData methodsFor: 'as yet unclassified' stamp: 'bys 5/11/2016 02:41'!findUser: id"Retorna un usuario determinado si es que existe en la lista de usuarios."	^self auxUsers at: id ifAbsent: [^nil]! !!LoadData methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 13:49'!initialize	auxUsers:= Dictionary new.	auxMovies:= Dictionary new.	processor:= InfoProcessor new.! !!LoadData methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 13:53'!loadMoviesFrom: moviesPath loadUsersFrom: usersPath loadRatingsFrom: ratingsPath loadFSFrom: fsPath	"Metodo que retorna una instancia de Moovies totalmente cargada desde los archivos pasados por parametros"	self processor: (MovieProcessor new).	self processor loadFrom: moviesPath to: self .		self processor: (UserProcessor new).	self processor loadFrom: usersPath to: self .		self processor: (RatingProcessor new).	self processor loadFrom: ratingsPath to: self .		self processor: (FSProcessor new).	self processor loadFrom: fsPath to: self .	^Moovies newWithMovies: (self auxMovies) andUsers: (self auxUsers)! !!LoadData methodsFor: 'as yet unclassified' stamp: 'bys 5/4/2016 16:38'!refGenres: genresCollection"El loader se encargara de detectar los generos que se deben agregar, orientandose desde una coleccion de generos por defecto."| aGenres defaultGenres |	aGenres:= OrderedCollection new.	defaultGenres := #('unknown' 'Action' 'Adventure' 'Animation' 'Childrens' 'Comedy' 'Crime' 'Documentary' 	'Drama' 'Fantasy' 'Film­Noir' 'Horror' 'Musical' 'Mystery' 'Romance' 'Sci­Fi' 'Thriller' 	'War' 'Western').	1 to: 19 do: [ :pos |  ((genresCollection at: pos)asInteger = 1)		ifTrue: [ aGenres add: (defaultGenres at: pos) ]		].	^aGenres! !TestCase subclass: #TestLoad	instanceVariableNames: 'moovies load moviesPath usersPath ratingPath fsPath movie1 user1'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!TestLoad methodsFor: 'as yet unclassified' stamp: 'bys 5/11/2016 19:33'!testFindMovie	"Test del metodo para encontrar una pelicula en los diccionarios temporales"	"Agrego directamente una pelicula al diccionario"	load auxMovies at: 1 put: movie1.	"Compruebo que el metodo retorna correctamente la pelicula buscada"	self assert: (load findMovie: 1)isNotNil ! !!TestLoad methodsFor: 'as yet unclassified' stamp: 'bys 5/11/2016 19:38'!testLoadMoviesUsersRatingsAndFS	"Test del metodo para retornar una instancia cargada de la clase Moovies"	"Se disponen 4 archivos con 4 elementos cada uno que seran cargados a la nueva instancia. Para el correcto funcionamiento del test, los archivos se deben guardar en C:\data\"	moovies:= load loadMoviesFrom: moviesPath loadUsersFrom: usersPath loadRatingsFrom: ratingPath loadFSFrom: fsPath .	"Se comprueba que la instancia moovies se cargo correctamente"	self assert: moovies users size = 4.	self assert: moovies movies size = 4! !!TestLoad methodsFor: 'as yet unclassified' stamp: 'bys 5/11/2016 19:34'!testFindUser	"Test del metodo para encontrar una pelicula en los diccionarios temporales"	"Agrego directamente un usuario al diccionario"	load auxUsers at: 1 put: user1.	"Compruebo que el metodo retorna correctamente la pelicula buscada"	self assert: (load findUser: 1)isNotNil ! !!TestLoad methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 13:52'!setUp	moviesPath:= '\data\u.item.new.csv'.	usersPath:= '\data\u.user.csv'.	ratingPath:= '\data\u.data.new.csv'.		fsPath:= '\data\u.connection.csv'.	load:= LoadData new.	movie1:= Movie id: 1 title: 'Hola' release: 2016.	user1:= User fname: 'Holi' lname: 'Chau' age: 18 ocuppation: 'Algo' zipCode: 1900 app: nil.! !Object subclass: #InfoProcessor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!InfoProcessor commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!InfoProcessor methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 00:07'!loadFrom: aPath to: aLoader	"Carga elementos de un archivo externo en una instancia de Moovies."	|file next|	file:= aPath asFileReference readStream.	[file atEnd]	whileFalse: [ 		next:= (file nextLine)findTokens: '|'.				self processInfo: next to: aLoader.			 ]! !!InfoProcessor methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 00:08'!processInfo: aCollection to: aLoader	^self subclassResponsibility ! !InfoProcessor subclass: #MovieProcessor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!MovieProcessor commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!MovieProcessor methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 00:09'!processInfo: aCollection to: aLoader		aLoader auxMovies at: (aCollection at:1)asInteger	put: ( Movie id: nil title: (aCollection at:2) release: (aCollection at:3) genres: (aLoader refGenres: (aCollection last: 19)) ).! !InfoProcessor subclass: #FSProcessor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!FSProcessor commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FSProcessor methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 00:09'!processInfo: aCollection to: aLoader	(aLoader findUser: (aCollection at:1)asInteger) 	addFriend: (aLoader findUser: (aCollection at:2)asInteger)! !TestCase subclass: #TestUser	instanceVariableNames: 'moovies movie1 movie2 movie3 rating user1 user2 user3'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!TestUser methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 17:59'!testAddFriend	"Se testea el metodo de la clase User para agregar amigos"	"Primero compruebo que no poseen amigos en su lista"	self assert: user1 friends size = 0.	self assert: user2 friends size = 0.	"Agrego un amigo con el metodo correspondiente (con este metodo, se agregan mutuamente a sus listas de amigos.)"	user1 addFriend: user2.	"Compruebo que lo agrego correctamente, y que se agregaron mutuamente a sus propias listas de amigos."	self assert: user1 friends size = 1.	self assert: user2 friends size = 1! !!TestUser methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 19:10'!testIsFriend	"Se testea el metodo de la clase User para comprobar que dos usuarios son amigos"	"Compruebo que el metodo reacciona correctamente y verifica que dos usuarios NO son amigos entre si."	self deny: (user1 isFriend: user2).	"Agrego un amigo de forma directa a cada uno de los usuarios."	user1 friends add: user2.	user2 friends add: user1.	"Compruebo que el metodo reacciona correctamente y verifica que ambos usuarios son amigos entre si."	self assert: (user1 isFriend: user2).	self assert: (user2 isFriend: user1).! !!TestUser methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 19:21'!testRateMovie	"Se testea el metodo de la clase User para calificar una pelicula determinada"	"Compruebo que la pelicula no ha sido calificada aun."	self assert: (moovies findMovie: movie1) rating = 0.	"Califico la pelicula con el metodo correspondiente."	user1 rateMovie: movie1 value: 5.	"Compruebo la calificacion de la pelicula: se verifica que la pelicula tenga el rating otorgado (5) y que la pelicula se agrego al usuario como pelicula vista."	self assert: (moovies findMovie: movie1) rating = 5.	self assert: (user1 movies includes: movie1)! !!TestUser methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 19:13'!testSawMovie	"Se testea el metodo de la clase User para comprobar que vio una pelicula determinada"	"Compruebo que el metodo reacciona correctamente y verifica que el usuario no ha visto la pelicula todavia."	self deny: (user1 sawMovie: movie1).	"Agrego una pelicula de forma directa a la lista de peliculas de un usuario."	user1 movies add: movie1.	"Compruebo que el metodo reacciona correctamente y verifica que el usuario vio la pelicula."	self assert: (user1 sawMovie: movie1).! !!TestUser methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 19:05'!testFavouriteGenre	"Se testea el metodo de la clase User para retornar el genero favorito del usuario"	"Seteo de generos a las peliculas (2 con un genero, 1 con otro)"	movie1 genres add: 'Accion'.	movie2 genres add: 'Accion'.	movie3 genres add: 'Terror'.	"Agrego las peliculas a un usuario directamente"	user1 movies add: movie1.	user1 movies add: movie2.	user1 movies add: movie3.	"Compruebo que el genero favorito es 'Accion', ya que vio 2 peliculas de accion y solo 1 de 'Terror'"	self deny: (user1 favouriteGenre ) = 'Terror'.	self assert: (user1 favouriteGenre) = 'Accion'.		! !!TestUser methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:33'!testAddMovie	"Se testea el metodo de la clase User para agregar una pelicula vista por un usuario a su propia lista de peliculas vistas."	"Primero compruebo que no poseen peliculas en su lista inicialmente."	self assert: user1 movies size = 0.	"Agrego una pelicula con el metodo correspondiente (con este metodo, se agregan mutuamente a sus listas de amigos.)"	user1 addMovie: movie1.	"Compruebo que lo agrego correctamente, y que se agregaron mutuamente a sus propias listas de amigos."	self assert: user1 movies size = 1.	! !!TestUser methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 18:54'!testDeleteFriend	"Se testea el metodo de la clase User para eliminar amigos"	"Agrego de manera directa una relacion de amistad"	user1 friends add: user2.	user2 friends add: user1.	"Compruebo que se posee un amigo en su lista"	self assert: user1 friends size = 1.	self assert: user2 friends size = 1.	"Elimino un amigo con el metodo correspondiente (con este metodo, se eliminan mutuamente de sus listas de amigos.)"	user1 deleteFriend: user2.	"Compruebo que lo elimino correctamente, y que se agregaron mutuamente a sus propias listas de amigos."	self assert: user1 friends size = 0.	self assert: user2 friends size = 0! !!TestUser methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 12:48'!setUp	moovies:= Moovies new.	user1:= User fname: 'pedro' lname: 'troglio' age: 7 ocuppation: 7 zipCode: 7 app: moovies.	user2:= User fname: 'maestruli' lname: 'ad' age: 7 ocuppation: 7 zipCode: 7 app: moovies.	movie1:= Movie id: 1 title: 'Superman' release: 2015.	movie2:= Movie id: 2 title: 'Batman' release: 2014.	movie3:= Movie id: 2 title: 'El Conjuro' release: 2012.	moovies movies add: movie1; add: movie2; add:movie3.! !TestCase subclass: #TestMoovies	instanceVariableNames: 'moovies movie1 movie2 movie3 rating user1 user2 user3'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!TestMoovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:37'!testAddUsers	"Se testea el metodo para agregar usuarios a la instancia de la clase Moovies a traves de una coleccion"	"Se comprueba que la instancia no posee usuarios"	self assert: moovies users size = 0.	"Se agrega una coleccion de usuarios con el metodo implementado"	moovies addUsers: #(user1 user2 user3).	"Se comprueba que los usuarios han sido añadidos correctamente a la instancia"	self deny: moovies users size = 0.	self assert: moovies users size = 3		! !!TestMoovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:51'!testExistsMovie	"Se testea el metodo para comprobar si una pelicula existe en la instancia de la clase Moovies"	"Se comprueba que la instancia no posee la pelicula con el metodo implementado"	self deny: (moovies existsMovie: movie1).	"Agrego una pelicula de forma directa a la instancia"	moovies movies add: movie1.	"Se comprueba que la instancia posee la pelicula con el metodo implementado"	self assert: (moovies existsMovie: movie1).		! !!TestMoovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:36'!testAddMovies	"Se testea el metodo para agregar peliculas a la instancia de la clase Moovies a traves de una coleccion"	"Se comprueba que la instancia no posee peliculas"	self assert: moovies movies size = 0.	"Se agrega una coleccion de peliculas con el metodo implementado"	moovies addMovies: #(movie1 movie2 movie3).	"Se comprueba que las peliculas han sido añadidas correctamente a la instancia"	self deny: moovies movies size = 0.	self assert: moovies movies size = 3		! !!TestMoovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:32'!testAddMovie	"Se testea el metodo para agregar una pelicula a la instancia de la clase Moovies"	"Se comprueba que la instancia no posee peliculas"	self assert: moovies movies size = 0.	"Se agrega una pelicula con el metodo implementado"	moovies addMovie: movie1.	"Se comprueba que la pelicula ha sido añadida correctamente a la instancia"	self deny: moovies movies size = 0.	self assert: moovies movies size = 1		! !!TestMoovies methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 12:51'!setUp	moovies:= Moovies new.	user1:= User fname: 'Maestruli' lname: 'JaaA' age: 12 ocuppation: 'reirse' zipCode: 1900 app: moovies.	user2:= User fname: 'Pablo' lname: 'Guede' age: 15 ocuppation: 'pechear' zipCode: 1900 app: moovies.	user3:= User fname: 'Marcelo' lname: 'Gallardo' age: 18 ocuppation: 'rasguñar' zipCode: 1900 app: moovies.	movie1:= Movie id: 1 title: 'namtaB' release: 2015.	movie2:= Movie id: 2 title: 'namrepuS' release: 2014.	movie3:= Movie id: 3 title: 'El señor de los anillos' release: 2014.					! !!TestMoovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:59'!testFindMovie	"Se testea el metodo para retornar una pelicula existente en la instancia de la clase Moovies"	"Se comprueba que la instancia no posee la pelicula con el metodo implementado"	self assert: (moovies findMovie: movie1)isNil.	"Agrego una pelicula de forma directa a la instancia"	moovies movies add: movie1.	"Se comprueba que la instancia posee la pelicula con el metodo implementado"	self assert: (moovies findMovie: movie1) = movie1.		! !!TestMoovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:31'!testActiveUsers	"Se testea el metodo para seleccionar los 10 (o menos) usuarios mas activos"	"Se realizan varias calificaciones a peliculas para que los usuarios tengan actividad en el sistema"	moovies movies add: movie1.		moovies movies add: movie2.		moovies users add: user1.	moovies users add: user2.	user1 rateMovie: movie1 value: 4.	user1 rateMovie: movie2 value: 3. "user1 califica 2"	user2 rateMovie: movie1 value: 4. "user2 califica 1"	"Se llama al metodo correspondiente y se comprueba que se retorna la coleccion"	self deny: moovies activeUsers size = 0.	self assert: moovies activeUsers size = 2		! !!TestMoovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:59'!testFindUser	"Se testea el metodo para retornar un usuario existente en la instancia de la clase Moovies"	"Se comprueba que la instancia no posee al usuario con el metodo implementado"	self assert: (moovies findUser: user1)isNil.	"Agrego un usuario de forma directa a la instancia"	moovies users add: user1.	"Se comprueba que la instancia posee el usuario con el metodo implementado"	self assert: (moovies findUser: user1) = user1.		! !!TestMoovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:46'!testDeleteMovie	"Se testea el metodo para borrar una pelicula a la instancia de la clase Moovies"	moovies addMovie: movie1.	"Se comprueba que la instancia posee 1 pelicula"	self assert: moovies movies size = 1.	"Se elimina una pelicula con el metodo implementado"	moovies deleteMovie: movie1.	"Se comprueba que la pelicula ha sido eliminada correctamente a la instancia"	self deny: moovies movies size = 1.	self assert: moovies movies size = 0		! !!TestMoovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:37'!testAddUser	"Se testea el metodo para agregar un usuario a la instancia de la clase Moovies"	"Se comprueba que la instancia no posee usuarios"	self assert: moovies users size = 0.	"Se agrega un usuario con el metodo implementado"	moovies addUser: user1.	"Se comprueba que el usuario ha sido añadido correctamente a la instancia"	self deny: moovies users size = 0.	self assert: moovies users size = 1		! !!TestMoovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 22:00'!testExistsUser	"Se testea el metodo para comprobar si un usuario existe en la instancia de la clase Moovies"	"Se comprueba que la instancia no posee al usuario con el metodo implementado"	self deny: (moovies existsUser: user1).	"Agrego un usuario de forma directa a la instancia"	moovies users add: user1.	"Se comprueba que la instancia posee al usuario con el metodo implementado"	self assert: (moovies existsUser: user1).		! !!TestMoovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:41'!testAreFriends	"Se testea el metodo para comprobar si dos usuarios son amigos entre ellos"	moovies users add: user1.	moovies users add: user2.	"Se comprueba que los usuarios no son amigos entre ellos con el metodo implementado"	self deny: (moovies areFriends: user1 and: user2).	"Agrego a la lista de amigos de ambos usuarios a cada uno"	user1 friends add: user2.	user2 friends add: user1.	"Se comprueba que son amigos con el metodo implementado"	self assert: (moovies areFriends: user1 and: user2).		! !InfoProcessor subclass: #UserProcessor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!UserProcessor commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!UserProcessor methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 12:52'!processInfo: aCollection to: aLoader		aLoader auxUsers at: (aCollection at:1)asInteger put: (User fname: (aCollection at: 6) lname: (aCollection at:7) age: (aCollection at: 2)asInteger	ocuppation: (aCollection at: 4) 		zipCode: (aCollection at:5)asInteger	app: nil).	! !TestCase subclass: #TestMovie	instanceVariableNames: 'movie1 user1 rating'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!TestMovie methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 20:45'!testRating	"Se testea el metodo para obtener un promedio de las calificaciones obtenidas por una 	pelicula"	"Se comprueba que al no tener una calificacion aun, se retorne 0"	self assert: movie1 rating = 0.	"Se realizan varias calificaciones a una pelicula determinada"	movie1 rate: (Rating new: 5 by: nil).	movie1 rate: (Rating new: 3 by: nil).	movie1 rate: (Rating new: 1 by: nil).	"Se comprueba que el promedio se realiza correctamente, y que se espera el resultado correcto 	(5 + 3 + 1) / 3 = 3 "	self assert: movie1 rating = 3.	self deny: movie1 rating = 0! !!TestMovie methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:34'!testAddGenres	"Se testea el metodo para agregar varios generos a una pelicula a traves de una coleccion."	"Compruebo que la pelicula inicialmente no posee generos."	self assert: movie1 genres size = 0.	"Agrego los generos a traves de la colecccion."	"La coleccion de generos posee 3 strings."	movie1 addGenres: #('Terror' 'Suspenso' 'Horror').	"Compruebo que los generos se agregaron correctamente verificando el tamaño de la coleccion de 	generos (tiene que ser igual a 3)"	self assert: movie1 genres size = 3.! !!TestMovie methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 20:07'!testAddGenre	"Se testea el metodo para agregar un genero a una pelicula"	"Declaro el genero a agregar a la pelicula"	|genre1|	genre1:= 'Terror'.	"Compruebo que la pelicula inicialmente no posee generos."	self assert: movie1 genres size = 0.	"Agrego el genero con el metodo implementado."	movie1 addGenre: genre1.	"Compruebo que el genero se agrego correctamente verificando el tamaño de la coleccion de generos"	self assert: movie1 genres size = 1.! !!TestMovie methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 20:22'!testRate	"Se testea el metodo para que una pelicula sea calificada con una instancia de la clase Rating"	"Compruebo que la pelicula aun no ha sido calificada."	self assert: movie1 ratings size = 0.	"Califico la pelicula con una instancia de la clase Rating"	rating:= Rating new: 5 by: user1.	movie1 rate: rating.	"Compruebo que la instancia de la clase Rating fue agregada correctamente"	self assert: movie1 ratings size = 1.! !!TestMovie methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 12:37'!setUp	user1:= UserSpotify fname: 'maestruli' lname: 'ad' age: 7 ocuppation: 7 zipCode: 7 app: nil.	movie1:= Movie id: 1 title: 'Superman' release: 2015.	! !Object subclass: #Movie	instanceVariableNames: 'title release genres ratings imdbid'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!Movie commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	genre:		<Object>	movieid:		<Object>	ratings:		<Object>	release:		<Object>	title:		<Object>    Implementation Points!!Movie methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 17:20'!rating"Retorna un promedio de la puntuacion total de la pelicula."	(self ratings size > 0)	ifTrue: [ ^(self ratings inject:0 into: [ :suma :r1 |  suma + r1 rating ]) / self ratings size ]	ifFalse: [^0]	! !!Movie methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 17:34'!rate: unRate"Califica una pelicula con un valor entre 1 y 5 inclusive."	(unRate rating >= 1) & (unRate rating <= 5)	ifTrue: [self ratings add: unRate]	! !!Movie methodsFor: 'accessing' stamp: 'bys 4/30/2016 19:05'!addGenre: unGenero"Agrega un genero a la lista de generos de la pelicula."	self genres add: unGenero! !!Movie methodsFor: 'accessing' stamp: 'bys 5/3/2016 21:07'!addGenres: aGenres"Agrega generos desde una coleccion a la lista de generos de la pelicula."	self genres addFrom: aGenres.! !!Movie methodsFor: 'accessing' stamp: 'bys 5/4/2016 21:04'!= otraPeli	^(otraPeli title = self title) &	(otraPeli release = self release) &	(otraPeli imdbid = self imdbid)	! !!Movie methodsFor: 'accessing' stamp: 'bys 5/4/2016 20:54'!imdbid	^ imdbid! !!Movie methodsFor: 'accessing' stamp: 'bys 4/23/2016 18:41'!ratings: anObject	ratings := anObject! !!Movie methodsFor: 'accessing' stamp: 'bys 4/30/2016 21:49'!initialize	genres:= OrderedCollection new.	ratings:= OrderedCollection new! !!Movie methodsFor: 'accessing' stamp: 'bys 4/30/2016 22:16'!genres	^ genres! !!Movie methodsFor: 'accessing' stamp: 'bys 4/29/2016 21:32'!title: anObject	title := anObject! !!Movie methodsFor: 'accessing' stamp: 'bys 4/29/2016 19:52'!release: anObject	release := anObject! !!Movie methodsFor: 'accessing' stamp: 'bys 4/29/2016 21:32'!title	^ title! !!Movie methodsFor: 'accessing' stamp: 'bys 4/23/2016 18:41'!ratings	^ ratings! !!Movie methodsFor: 'accessing' stamp: 'bys 4/29/2016 19:53'!release	^ release! !!Movie methodsFor: 'accessing' stamp: 'bys 5/4/2016 20:54'!imdbid: anObject	imdbid := anObject! !!Movie methodsFor: 'accessing' stamp: 'bys 4/30/2016 22:16'!genres: anObject	genres := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Movie class	instanceVariableNames: ''!!Movie class methodsFor: 'constructor' stamp: 'bys 5/4/2016 20:54'!id: unID title: unNombre release: unaFecha	^self new	imdbid: unID;	title: unNombre;	release: unaFecha! !!Movie class methodsFor: 'constructor' stamp: 'bys 5/11/2016 00:32'!id: unID title: unNombre release: unaFecha genres: genresCollection	^self new	imdbid: unID;	title: unNombre;	release: unaFecha;	genres: genresCollection.! !Object subclass: #Moovies	instanceVariableNames: 'users movies'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!Moovies commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	movies:		<Object>	users:		<Object>    Implementation Points!!Moovies methodsFor: 'accessing' stamp: 'bys 4/23/2016 16:09'!movies: anObject	movies := anObject! !!Moovies methodsFor: 'accessing' stamp: 'bys 4/23/2016 16:09'!users: anObject	users := anObject! !!Moovies methodsFor: 'accessing' stamp: 'bys 4/23/2016 16:09'!users	^ users! !!Moovies methodsFor: 'accessing' stamp: 'bys 4/23/2016 16:09'!movies	^ movies! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/3/2016 19:41'!addUsers: aUserCollection"Agrega usuarios desde una coleccion a la lista de usuarios"	aUserCollection do: [ :u | self addUser: u ]! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 17:30'!activeUsers"Devuelve una coleccion con los 10 usuarios mas activos del sistema."	|usersColl|	usersColl:= self users asSortedCollection: [ :u1 :u2 | u1 movies size > u2 movies size ].	(usersColl size < 10)		ifTrue: [^usersColl first: (usersColl size)]	ifFalse: [ ^usersColl first: 10 ]! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:57'!findUser: aUser"Retorna un usuario determinado si es que existe en la lista de usuarios."	^(self users detect: [ :u1 | u1 = aUser]	 ifNone: [ ^nil ]	)! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/3/2016 19:11'!addUser: aUser"Agrega un usuario nuevo a la lista de usuarios"	(self existsUser: aUser)	ifFalse: [ self users add: aUser]	ifTrue: [ self error: 'Ese usuario ya existe, no puedes agregarlo.' ]! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 20:59'!initialize	users:= OrderedCollection new.	movies:= OrderedCollection new.! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/3/2016 22:21'!existsUser: aUser"Devuelve true si un usuario determinado existe en la lista de usuarios y false en caso contrario."	^(self users includes: aUser)! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/3/2016 19:11'!areFriends: aUser and: otherUser"Devuelve true o false dependiendo si son o no amigos ambos usuarios."	(self existsUser: aUser)	ifTrue: [ ^(aUser isFriend: otherUser) ]! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 21:56'!findMovie: aMovie"Retorna una pelicula determinada si es que existe en la lista de peliculas."	^(self movies detect: [ :p1 | p1 = aMovie]	 ifNone: [ ^nil ]	)! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/3/2016 19:12'!deleteMovie: aMovie"Elimina una pelicula existente de la lista de peliculas"	self movies remove: aMovie	ifAbsent: [ self error: 'La pelicula que quiere eliminar no existe.' ]					! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 00:16'!withMovies: aMoviesCollection andUsers: aUsersCollection	self movies addAll: aMoviesCollection .	self users addAll: aUsersCollection .	self users do: [ :u | u moovies: self. ]! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/4/2016 20:57'!existsMovie: aMovie"Devuelve true si una pelicula determinada existe en la lista de peliculas y false en caso contrario."	^(self movies includes: aMovie)! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 17:30'!bestMovies"Devuelve una coleccion con las 10 peliculas mejores calificadas."	|moviesColl|	moviesColl:= self movies asSortedCollection: [ :m1 :m2 | m1 rating > m2 rating ].	(moviesColl size < 10)	ifTrue: [ ^moviesColl first: (moviesColl size) ]	ifFalse: [ ^moviesColl first: 10]! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/3/2016 19:42'!addMovies: aMovieCollection"Agrega peliculas desde una coleccion a la lista de peliculas"	aMovieCollection do: [ :m | self addMovie: m ]! !!Moovies methodsFor: 'as yet unclassified' stamp: 'bys 5/4/2016 21:11'!addMovie: aMovie"Agrega una pelicula nueva a la lista de peliculas"	(self existsMovie: aMovie)	ifFalse: [ self movies add: aMovie]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Moovies class	instanceVariableNames: ''!!Moovies class methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 00:05'!newWithMovies: aMoviesCollection andUsers: aUsersCollection	^self new withMovies: aMoviesCollection andUsers: aUsersCollection ! !Object subclass: #Rating	instanceVariableNames: 'rating user'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!Rating commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	rating:		<Object>	timestamp:		<Object>	userid:		<Object>    Implementation Points!!Rating methodsFor: 'accessing' stamp: 'bys 4/23/2016 18:43'!rating: unValor	rating:= unValor! !!Rating methodsFor: 'accessing' stamp: 'bys 5/3/2016 18:57'!user: anObject	user := anObject! !!Rating methodsFor: 'accessing' stamp: 'bys 5/3/2016 18:57'!user	^ user! !!Rating methodsFor: 'accessing' stamp: 'bys 4/23/2016 12:40'!rating	^ rating! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rating class	instanceVariableNames: ''!!Rating class methodsFor: 'constructor' stamp: 'bys 5/12/2016 12:56'!new: aValue by: aUser	^self new	rating: aValue;	user: aUser! !InfoProcessor subclass: #RatingProcessor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!RatingProcessor commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!RatingProcessor methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 00:10'!processInfo: aCollection to: aLoader	(aLoader findUser: (aCollection at:1)asInteger)	rateMovie: (aLoader findMovie: (aCollection at: 3)asInteger)	value: (aCollection at:4)asInteger! !TestCase subclass: #TestRating	instanceVariableNames: 'user1 rating1'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Promocion - Hito 1'!!TestRating methodsFor: 'as yet unclassified' stamp: 'bys 5/12/2016 12:37'!setUp	user1:= UserSpotify fname: 'maestruli' lname: 'ad' age: 7 ocuppation: 7 zipCode: 7 app: nil.! !!TestRating methodsFor: 'as yet unclassified' stamp: 'bys 5/10/2016 20:53'!testConstructor	"Se testea que el constructor de la clase Rating funciona correctamente."	"Hago uso del constructor"	rating1:= Rating new: 4 by: user1.	"Compruebo que la puntuacion se asigno correctamente"	self deny: rating1 rating isNil.	self assert: rating1 rating = 4.	"Compruebo que se asigno correspondientente el usuario que lo realizo"	self deny: rating1 user isNil.	self assert: rating1 user = user1	! !