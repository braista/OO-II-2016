TestCase subclass: #CasaFinDeSemanaTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 6-Ejercicio 3'!!CasaFinDeSemanaTest methodsFor: 'testing' stamp: ' 6/5/15 16:08'!testImpuestoAPagar	self assert: sinSuperficie impuestoAPagar = 0.	self assert: pocaSuperficie impuestoAPagar =  8750.0.	self assert: muchaSuperficie impuestoAPagar = 35000.0.! !!CasaFinDeSemanaTest methodsFor: 'running' stamp: ' 6/5/15 16:08'!setUp	sinSuperficie := CasaFinDeSemana superficie: 0.	pocaSuperficie := CasaFinDeSemana superficie: 50.	muchaSuperficie := CasaFinDeSemana superficie: 200! !!CasaFinDeSemanaTest methodsFor: 'accessing' stamp: ' 6/5/15 16:08'!muchaSuperficie	^muchaSuperficie! !!CasaFinDeSemanaTest methodsFor: 'accessing' stamp: ' 6/5/15 16:08'!pocaSuperficie	^pocaSuperficie! !!CasaFinDeSemanaTest methodsFor: 'accessing' stamp: ' 6/5/15 16:08'!sinSuperficie	^sinSuperficie! !Object subclass: #Inmueble	instanceVariableNames: 'superficie'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 6-Ejercicio 3'!!Inmueble commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	superficie:		<Object>    Implementation Points!!Inmueble methodsFor: 'accessing' stamp: 'bys 6/20/2016 14:37'!base	^self superficie * self tasa! !!Inmueble methodsFor: 'accessing' stamp: ' 6/5/15 16:08'!superficie: aNumber 	superficie := aNumber! !!Inmueble methodsFor: 'accessing' stamp: ' 6/5/15 16:08'!superficie	^superficie! !!Inmueble methodsFor: 'impuestos' stamp: ' 6/5/15 16:08'!impuestoAPagar	^self subclassResponsibility! !!Inmueble methodsFor: 'impuestos' stamp: ' 6/5/15 16:08'!tasa	^self subclassResponsibility! !!Inmueble methodsFor: 'impuestos' stamp: ' 6/5/15 16:08'!alicuotaImpuesto	^self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Inmueble class	instanceVariableNames: ''!!Inmueble class methodsFor: 'instance creation' stamp: ' 6/5/15 16:08'!superficie: aNumber	^self new superficie: aNumber! !Inmueble subclass: #ViviendaUnica	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 6-Ejercicio 3'!!ViviendaUnica commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!ViviendaUnica methodsFor: 'impuestos' stamp: ' 6/5/15 16:08'!tasa	^2000! !!ViviendaUnica methodsFor: 'impuestos' stamp: 'bys 6/20/2016 14:41'!impuestoAPagar	^self base * self alicuotaImpuesto * 0.2.	! !!ViviendaUnica methodsFor: 'impuestos' stamp: ' 6/5/15 16:08'!alicuotaImpuesto	^0.01! !!ViviendaUnica methodsFor: 'impuestos' stamp: 'bys 6/20/2016 14:43'!base	^super base * 0.5! !Inmueble subclass: #CasaFinDeSemana	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 6-Ejercicio 3'!!CasaFinDeSemana commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!CasaFinDeSemana methodsFor: 'impuestos' stamp: ' 6/5/15 16:07'!tasa	^3500! !!CasaFinDeSemana methodsFor: 'impuestos' stamp: 'bys 6/20/2016 14:40'!impuestoAPagar	^self base * self alicuotaImpuesto.	! !!CasaFinDeSemana methodsFor: 'impuestos' stamp: ' 6/5/15 16:07'!alicuotaImpuesto	^0.05! !TestCase subclass: #ViviendaUnicaTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 6-Ejercicio 3'!!ViviendaUnicaTest methodsFor: 'accessing' stamp: ' 6/5/15 16:08'!muchaSuperficie	^muchaSuperficie! !!ViviendaUnicaTest methodsFor: 'accessing' stamp: ' 6/5/15 16:08'!pocaSuperficie	^pocaSuperficie! !!ViviendaUnicaTest methodsFor: 'accessing' stamp: ' 6/5/15 16:08'!sinSuperficie	^sinSuperficie! !!ViviendaUnicaTest methodsFor: 'running' stamp: ' 6/5/15 16:08'!setUp	sinSuperficie := ViviendaUnica superficie: 0.	pocaSuperficie := ViviendaUnica superficie: 50.	muchaSuperficie := ViviendaUnica superficie: 200! !!ViviendaUnicaTest methodsFor: 'testing' stamp: ' 6/5/15 16:08'!testImpuestoAPagar	self assert: sinSuperficie impuestoAPagar = 0.	self assert: pocaSuperficie impuestoAPagar = 100.	self assert: muchaSuperficie impuestoAPagar = 400! !!ViviendaUnicaTest methodsFor: 'initialize-release' stamp: ' 6/5/15 16:08'!initialize	"Initialize a newly created instance. This method must answer the receiver."	" *** Edit the following to properly initialize instance variables ***"	sinSuperficie := nil.	pocaSuperficie := nil.	muchaSuperficie := nil.	" *** And replace this comment with additional initialization code *** "	^self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ViviendaUnicaTest class	instanceVariableNames: ''!!ViviendaUnicaTest class methodsFor: 'instance creation' stamp: ' 6/5/15 16:08'!new	"Answer a newly created and initialized instance."	^super new initialize! !