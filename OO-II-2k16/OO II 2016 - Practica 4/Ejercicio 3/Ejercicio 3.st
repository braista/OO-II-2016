Object subclass: #Empleado	instanceVariableNames: 'hijos horas casado'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 4-Ejercicio 3'!!Empleado commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	casado:		<Object>	hijos:		<Object>	horas:		<Object>    Implementation Points!!Empleado methodsFor: 'accessing' stamp: 'bys 5/1/2016 20:21'!casado	^ casado! !!Empleado methodsFor: 'accessing' stamp: 'bys 5/1/2016 20:21'!hijos	^ hijos! !!Empleado methodsFor: 'accessing' stamp: 'bys 5/1/2016 20:21'!casado: anObject	casado := anObject! !!Empleado methodsFor: 'accessing' stamp: 'bys 5/1/2016 20:21'!horas	^ horas! !!Empleado methodsFor: 'accessing' stamp: 'bys 5/1/2016 20:21'!horas: anObject	horas := anObject! !!Empleado methodsFor: 'accessing' stamp: 'bys 5/1/2016 20:21'!hijos: anObject	hijos := anObject! !!Empleado methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:03'!basico	^self subclassResponsibility ! !!Empleado methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:33'!aportes	^0.13! !!Empleado methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:29'!porHijos	^self subclassResponsibility ! !!Empleado methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:33'!sueldo	^(self basico + self porHijos + self porHoras) * self aportes! !!Empleado methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:29'!porHoras	^self subclassResponsibility ! !Empleado subclass: #Temporario	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 4-Ejercicio 3'!!Temporario commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Temporario methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:22'!porHoras	^self horas * 5! !!Temporario methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:07'!basico	^1000! !!Temporario methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:24'!porHijos	(self hijos > 0) & (self casado)	ifTrue: [ ^100 ]	ifFalse: [ ^0 ]! !Empleado subclass: #Planta	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 4-Ejercicio 3'!!Planta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Planta methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:28'!porHoras	^self horas * 0! !!Planta methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:07'!basico	^3000! !!Planta methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:27'!porHijos	^self hijos * 150! !Empleado subclass: #Pasante	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 4-Ejercicio 3'!!Pasante commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Pasante methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:22'!porHoras	^self horas * 40! !!Pasante methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:25'!basico	^0! !!Pasante methodsFor: 'as yet unclassified' stamp: 'bys 5/1/2016 20:26'!porHijos	^self hijos * 0! !