Object subclass: #Figure	instanceVariableNames: 'width'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 8-Ejercicio 1'!!Figure commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	type:		<Object>	width:		<Object>    Implementation Points!!Figure methodsFor: 'initialize - release' stamp: 'bys 6/25/2016 17:52'!width: aNumber	width := aNumber! !!Figure methodsFor: 'initialize - release' stamp: 'bys 6/25/2016 20:14'!area	^self subclassResponsibility ! !!Figure methodsFor: 'initialize - release' stamp: 'AR 5/17/2014 20:52'!initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	^ self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Figure class	instanceVariableNames: ''!!Figure class methodsFor: 'Figure types' stamp: 'AR 5/17/2014 20:50'!square ^1! !!Figure class methodsFor: 'Figure types' stamp: 'AR 5/17/2014 20:50'!equilateralTriangle ^3! !!Figure class methodsFor: 'Figure types' stamp: 'AR 5/17/2014 20:49'!circle ^2! !!Figure class methodsFor: 'instance creation' stamp: 'bys 6/25/2016 17:50'!type: aType width: aNumber	^ self new width: aNumber! !!Figure class methodsFor: 'instance creation' stamp: 'AR 5/17/2014 20:48'!new	"Answer a newly created and initialized instance."	^super new initialize! !!Figure class methodsFor: 'as yet unclassified' stamp: 'bys 6/25/2016 20:12'!width: aNumber	^ self new width: aNumber! !TestCase subclass: #FigureTest	instanceVariableNames: 'circulo triangulo cuadrado paralelogramo ancho alto'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 8-Ejercicio 1'!!FigureTest commentStamp: '<historical>' prior: 0!A FigureTest is a test class for testing the behavior of Figure!!FigureTest methodsFor: 'tests-calculations' stamp: 'toto 5/13/2016 12:49'!testCircleArea	self assert: (circulo area = (ancho * 2 * (ancho * 2) * Float pi)).! !!FigureTest methodsFor: 'tests-calculations' stamp: 'bys 6/25/2016 20:40'!setUp	ancho := 3.	alto:= 4.	circulo := Circle width: ancho.	triangulo := Triangle width: ancho.	cuadrado := Square width: ancho.	paralelogramo := Parallelogram width: ancho height: alto .! !!FigureTest methodsFor: 'tests-calculations' stamp: 'bys 6/25/2016 21:13'!testCirclePerimeter	self assert: (circulo perimetro = (2 * circulo radio * Float pi)).! !!FigureTest methodsFor: 'tests-calculations' stamp: 'bys 6/25/2016 21:20'!testParallelogramPerimeter	self assert: (paralelogramo perimetro = (2 * (ancho + alto))).! !!FigureTest methodsFor: 'tests-calculations' stamp: 'toto 5/13/2016 12:51'!testTriangleArea	self assert: (triangulo area = (3 sqrt / 4 * ancho * ancho )).! !!FigureTest methodsFor: 'tests-calculations' stamp: 'toto 5/13/2016 12:50'!testSquareArea	self assert: (cuadrado area = (ancho * ancho)).! !!FigureTest methodsFor: 'tests-calculations' stamp: 'bys 6/25/2016 21:25'!testTrianglePerimeter	self assert: (triangulo perimetro = (3 * ancho )).! !!FigureTest methodsFor: 'tests-calculations' stamp: 'toto 5/13/2016 12:40'!testArea! !!FigureTest methodsFor: 'tests-calculations' stamp: 'bys 6/25/2016 20:40'!testParallelogramArea	self assert: (paralelogramo area = (ancho * alto)).! !Figure subclass: #Triangle	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 8-Ejercicio 1'!!Triangle commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Triangle methodsFor: 'calculations' stamp: 'bys 6/25/2016 20:07'!area	^ 3 sqrt / 4 * width * width! !!Triangle methodsFor: 'calculations' stamp: 'bys 6/25/2016 21:24'!perimetro	^ 3 * width ! !Figure subclass: #Circle	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 8-Ejercicio 1'!!Circle commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Circle methodsFor: 'calculations' stamp: 'bys 6/25/2016 21:11'!radio	^ width * 2! !!Circle methodsFor: 'calculations' stamp: 'bys 6/25/2016 21:11'!area	^ self radio * (self radio) * Float pi! !!Circle methodsFor: 'calculations' stamp: 'bys 6/25/2016 21:12'!perimetro	^ 2 * self radio * Float pi! !Figure subclass: #Parallelogram	instanceVariableNames: 'height'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 8-Ejercicio 1'!!Parallelogram commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	height:		<Object>    Implementation Points!!Parallelogram methodsFor: 'accessing' stamp: 'bys 6/25/2016 20:36'!height	^ height! !!Parallelogram methodsFor: 'accessing' stamp: 'bys 6/25/2016 20:36'!height: anObject	height := anObject! !!Parallelogram methodsFor: 'calculations' stamp: 'bys 6/25/2016 20:34'!area	^ width * height! !!Parallelogram methodsFor: 'calculations' stamp: 'bys 6/25/2016 21:19'!perimetro	^ 2 * (width + height)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Parallelogram class	instanceVariableNames: ''!!Parallelogram class methodsFor: 'as yet unclassified' stamp: 'bys 6/25/2016 20:41'!width: aWidth height: aHeight	^self new width: aWidth; height: aHeight! !Parallelogram subclass: #Square	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 8-Ejercicio 1'!!Square commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Square class	instanceVariableNames: ''!!Square class methodsFor: 'as yet unclassified' stamp: 'bys 6/25/2016 20:42'!width: aNumber	^self new width: aNumber; height: aNumber! !