Object subclass: #Jugada	instanceVariableNames: 'jugador'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 1-Ejercicio 6'!!Jugada commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	jugador:		<Object>    Implementation Points!!Jugada methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:39'!jugador: anObject	jugador := anObject! !!Jugada methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:39'!jugador	^ jugador! !!Jugada methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:52'!determinarJugada: otraJugada	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Jugada class	instanceVariableNames: ''!!Jugada class methodsFor: 'as yet unclassified' stamp: 'northEast 4/10/2016 20:18'!new: unJugador	^self new jugador: unJugador! !Jugada subclass: #Ataque	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 1-Ejercicio 6'!!Ataque commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Ataque methodsFor: 'as yet unclassified' stamp: 'bys 4/10/2016 18:02'!recibirBloqueo	self jugador restar10 	! !!Ataque methodsFor: 'as yet unclassified' stamp: 'bys 4/10/2016 17:58'!recibirAtaque	|ene|. ene:= self jugador energia.	self jugador restar20: self jugador contrincante energia * 0.2.	self jugador contrincante restar20: ene * 0.2	! !!Ataque methodsFor: 'as yet unclassified' stamp: 'bys 4/10/2016 17:53'!determinarJugada: otraJugada	otraJugada recibirAtaque! !Jugada subclass: #Bloqueo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 1-Ejercicio 6'!!Bloqueo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Bloqueo methodsFor: 'as yet unclassified' stamp: 'bys 4/10/2016 18:05'!recibirBloqueo! !!Bloqueo methodsFor: 'as yet unclassified' stamp: 'bys 4/10/2016 18:03'!recibirAtaque	self jugador contrincante restar10 ! !!Bloqueo methodsFor: 'as yet unclassified' stamp: 'bys 4/10/2016 17:53'!determinarJugada: otraJugada	otraJugada recibirBloqueo! !Object subclass: #Juego	instanceVariableNames: 'turno'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 1-Ejercicio 6'!!Juego commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	turno:		<Object>    Implementation Points!!Juego methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:49'!turno	^ turno! !!Juego methodsFor: 'accessing' stamp: 'northEast 4/10/2016 20:35'!initialize	turno:= 10! !!Juego methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:49'!turno: anObject	turno := anObject! !!Juego methodsFor: 'accessing' stamp: 'northEast 4/10/2016 20:45'!chequearGanador: unJugador vs: otroJugador	unJugador energia < otroJugador energia ifTrue: [ self gana: otroJugador. ^true].	unJugador energia > otroJugador energia ifTrue: [ self gana: unJugador. ^true].	self empate .				! !!Juego methodsFor: 'accessing' stamp: 'northEast 4/10/2016 20:55'!empate	Transcript clear; show: 'Es un empate!!!!'; cr! !!Juego methodsFor: 'accessing' stamp: 'northEast 4/10/2016 19:49'!chequearVida: unJugador vs: otroJugador	unJugador energia <= 0 ifTrue: [ self gana: otroJugador. ^true].	otroJugador energia <= 0 ifTrue: [ self gana: unJugador. ^true].	^false.				! !!Juego methodsFor: 'accessing' stamp: 'northEast 4/10/2016 20:56'!gana: unJugador	Transcript clear; show: 'El ganador es: '; show: unJugador nombre; cr! !!Juego methodsFor: 'accessing' stamp: 'northEast 4/10/2016 20:38'!determinarGanadorEntre: unJugador y: otroJugador	1 to: self turno do: [ :i |		 (unJugador jugadaParaTurno: i) determinarJugada: (otroJugador jugadaParaTurno: i).		(self chequearVida: unJugador vs: otroJugador) ifTrue:[^true] ].	self chequearGanador: unJugador vs: otroJugador			! !Object subclass: #Jugador	instanceVariableNames: 'energia nombre contrincante jugadas'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 1-Ejercicio 6'!!Jugador commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contrincante:		<Object>	energia:		<Object>	nombre:		<Object>    Implementation Points!!Jugador methodsFor: 'accessing' stamp: 'northEast 4/10/2016 18:35'!agregarJugada: unaJugada en: pos	self jugadas at: pos put: unaJugada.! !!Jugador methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:41'!nombre	^ nombre! !!Jugador methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:41'!contrincante	^ contrincante! !!Jugador methodsFor: 'accessing' stamp: 'northEast 4/10/2016 18:52'!jugadaParaTurno: pos	^self jugadas at: pos.! !!Jugador methodsFor: 'accessing' stamp: 'bys 4/10/2016 18:16'!jugadas	^ jugadas! !!Jugador methodsFor: 'accessing' stamp: 'northEast 4/10/2016 19:00'!initialize	jugadas:= Array new: 10.	energia:=100.! !!Jugador methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:43'!restar10	self energia: self energia - 10.	! !!Jugador methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:41'!energia	^ energia! !!Jugador methodsFor: 'accessing' stamp: 'bys 4/10/2016 18:16'!jugadas: anObject	jugadas := anObject! !!Jugador methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:41'!contrincante: anObject	contrincante := anObject! !!Jugador methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:41'!nombre: anObject	nombre := anObject! !!Jugador methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:44'!restar20: amount	self energia: amount * 0.2! !!Jugador methodsFor: 'accessing' stamp: 'bys 4/10/2016 17:41'!energia: anObject	energia := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Jugador class	instanceVariableNames: ''!!Jugador class methodsFor: 'as yet unclassified' stamp: 'northEast 4/10/2016 19:10'!new: unNombre	^self new nombre:unNombre.	! !!Jugador class methodsFor: 'as yet unclassified' stamp: 'northEast 4/10/2016 20:11'!new: unNombre vs: unVS	^(self new nombre:unNombre; contrincante: unVS)	! !