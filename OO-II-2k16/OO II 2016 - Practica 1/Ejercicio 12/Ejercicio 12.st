TestCase subclass: #TestUsuario	instanceVariableNames: 'tw user1'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 1-Ejercicio 12'!!TestUsuario methodsFor: 'as yet unclassified' stamp: 'bys 4/13/2016 15:16'!testEliminarUsuario	tw agregarUsuario: 'testUser1' ap: 'testUser1' username: 'testUser1' 	desc: 'prueba de testUser1'.	tw eliminarUsuario: 'testUser1'.	self deny: (tw checkUsername: 'testUser1').			! !!TestUsuario methodsFor: 'as yet unclassified' stamp: 'bys 4/19/2016 12:22'!setUp	tw:= Twittter new.	tw altaUsuario: (Usuario new: 'elpepo' ap: 'gd' username: 'usuario1' desc: 'prueba de usuario 1' idUs: 0).	tw altaUsuario: (Usuario new: 'elpepo' ap: 'gd' username: 'usuario2' desc: 'prueba de usuario 2' idUs: 1).	user1:= Usuario new: 'elpepo' ap: 'gd' username: 'usuario1' desc: 'prueba de usuario 1' idUs: 0.! !!TestUsuario methodsFor: 'as yet unclassified' stamp: 'bys 4/13/2016 15:14'!testAgregarUsuario	self assert: (tw agregarUsuario: 'testUser1' ap: 'testUser1' username: 'testUser1' 	desc: 'prueba de testUser1').	self deny: (tw agregarUsuario: 'testUser1' ap: 'testUser1' username: 'testUser1' 	desc: 'prueba de testUser1').			! !!TestUsuario methodsFor: 'as yet unclassified' stamp: 'bys 4/13/2016 15:20'!testPublicarTweet	self assert: (user1 publicarTweet: 'la wea siempre es op').	self deny: (user1 publicarTweet: '').			! !Object subclass: #Twittter	instanceVariableNames: 'users'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 1-Ejercicio 12'!!Twittter commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	users:		<Object>    Implementation Points!!Twittter methodsFor: 'accessing' stamp: 'bys 4/12/2016 12:11'!checkUsername: unUsername	self users detect: [ :u1 |		unUsername = u1 username		] 		ifFound: [^true ]		ifNone: [ ^false ]		! !!Twittter methodsFor: 'accessing' stamp: 'bys 4/13/2016 15:13'!agregarUsuario: unNombre ap: unApellido username: unUsername desc: unaDescripcion	(self checkUsername: unUsername) ifTrue: [ 		Transcript clear; show: 'Ese nombre de usuario ya existe. Elige otro'.		^false		 ]		ifFalse: [ 			self altaUsuario: (Usuario new: unNombre ap: unApellido username: unUsername desc: 			unaDescripcion idUs: self nUsers).						^true			].			! !!Twittter methodsFor: 'accessing' stamp: 'bys 4/12/2016 12:26'!initialize 	users:= SortedCollection new sortBlock:[:u1 :u2 | u1 nombre < u2 nombre]! !!Twittter methodsFor: 'accessing' stamp: 'bys 4/12/2016 12:55'!bajaUsuario: unUser	self users remove: unUser ifAbsent: [ Transcript show: 'No se encontro user' ]! !!Twittter methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:26'!buscarUser: unUsername	^self users detect: [ :u1 | u1 username = unUsername ]		! !!Twittter methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:04'!users: anObject	users := anObject! !!Twittter methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:29'!eliminarUsuario: unUsername	(self checkUsername: unUsername) ifTrue: [ self bajaUsuario: (self buscarUser: unUsername).		Transcript clear; show: 'El usuario "',unUsername,'" se eliminó correctamente' ]	ifFalse: [ Transcript clear; show: 'El usuario "',unUsername,'" no existe.' ]	! !!Twittter methodsFor: 'accessing' stamp: 'bys 4/12/2016 12:25'!nUsers	^self users size! !!Twittter methodsFor: 'accessing' stamp: 'bys 4/12/2016 11:34'!altaUsuario: unUser	self users add: unUser! !!Twittter methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:04'!users	^ users! !Object subclass: #Tweets	instanceVariableNames: 'idtw fecha hora dueño texto likes'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 1-Ejercicio 12'!!Tweets commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	dueño:		<Object>	fecha:		<Object>	hora:		<Object>	idtw:		<Object>	likes:		<Object>	texto:		<Object>    Implementation Points!!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:34'!hora: anObject	hora := anObject! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 15:08'!= otroTweet	^self idtw = otroTweet idtw! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:34'!dueño: anObject	dueño := anObject! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:34'!idtw	^ idtw! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:34'!idtw: anObject	idtw := anObject! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:34'!dueño	^ dueño! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:34'!hora	^ hora! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:35'!likes	^ likes! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:35'!likes: anObject	likes := anObject! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 16:12'!mostrar	Transcript cr;	show: self dueño nombre; show:' ';	show: self dueño apellido; cr;	show: self fecha; show:' ';	show: self hora; show:' '	! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:35'!texto: anObject	texto := anObject! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:35'!texto	^ texto! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:34'!fecha	^ fecha! !!Tweets methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:34'!fecha: anObject	fecha := anObject! !Tweets subclass: #RT	instanceVariableNames: 'origen'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 1-Ejercicio 12'!!RT commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	origen:		<Object>    Implementation Points!!RT methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:35'!origen	^ origen! !!RT methodsFor: 'accessing' stamp: 'bys 4/12/2016 16:29'!mostrar	super mostrar.	Transcript cr; cr;		show: self texto; cr; cr;	show: '==============================================';cr;	show: 'RT of '; show: self origen dueño nombre; show:' ';	show: self origen dueño apellido; cr;	show: self origen fecha; show:' ';	show: self origen hora; cr; cr;	show: self origen texto; cr; cr;	show: '==============================================';cr;	show: 'Likes: ';	show: self likes; cr; cr;	show: '#############################################################################'! !!RT methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:35'!origen: anObject	origen := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RT class	instanceVariableNames: ''!!RT class methodsFor: 'as yet unclassified' stamp: 'bys 4/12/2016 15:36'!rt: unTweet texto: unTexto dueño: unUser id: unID	^self new 	dueño: unUser;	fecha: (DateAndTime today)asDate;	hora: (DateAndTime today)asTime;	likes: 0;	texto: unTexto;	idtw: unID;	origen: unTweet.		! !!RT class methodsFor: 'as yet unclassified' stamp: 'bys 4/12/2016 15:36'!rt: unTweet dueño: unUser id: unID	^self new 	dueño: unUser;	fecha: (DateAndTime today)asDate;	hora: (DateAndTime today)asTime;	likes: 0;	texto: '';	idtw: unID;	origen: unTweet.		! !Tweets subclass: #Tweet	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 1-Ejercicio 12'!!Tweet commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Tweet methodsFor: 'as yet unclassified' stamp: 'bys 4/12/2016 16:29'!mostrar	super mostrar.	Transcript cr; cr;	show: self texto; cr; cr;	show: 'Likes: ';	show: self likes; cr; cr;	show: '#############################################################################'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tweet class	instanceVariableNames: ''!!Tweet class methodsFor: 'as yet unclassified' stamp: 'bys 4/13/2016 13:25'!new: unTexto dueño: unUser id: unID	^self new 	dueño: unUser; 	fecha: (DateAndTime today)asDate;	hora: (DateAndTime today)asTime;	idtw: unID;	likes: 0;	texto: unTexto.		! !Object subclass: #Usuario	instanceVariableNames: 'idUser username nombre apellido descripcion tweets'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 1-Ejercicio 12'!!Usuario commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	apellido:		<Object>	descripcion:		<Object>	idUser:		<Object>	nombre:		<Object>	tweets:		<Object>	username:		<Object>    Implementation Points!!Usuario methodsFor: 'accessing' stamp: 'bys 4/13/2016 15:20'!publicarTweet: unTexto	(unTexto size > 1) & (unTexto size < 140) ifTrue: [ 		self agregarTweet: (Tweet new: unTexto dueño: (self) id: (self tweets)size).		^true		]		ifFalse: [ 			Transcript cr; show: 'El tweet es muy corto o muy largo (>1 < 140 caracteres)'.			^false ]! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 15:53'!mostrarTweets	self tweets do: [ :t1 |		t1 mostrar 		]! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 15:14'!bajaTweet: unTweet	(self checkTweet: unTweet)	ifTrue: [ 		self eliminarTweet: unTweet.		Transcript cr; show: 'El tweet se borró exitosamente.' 		]	! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 15:12'!eliminarTweet: unTweet	self tweets remove: unTweet ifAbsent: [ Transcript clear; show: 'ERROR: No se pudo eliminar el tw.' ]	! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:07'!idUser: anObject	idUser := anObject! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:20'!initialize	tweets:= SortedCollection new sortBlock: [ :t1 :t2 | t1 fecha < t2 fecha ]! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 15:09'!checkTweet: unTweet	^self tweets includes: unTweet! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:07'!descripcion: anObject	descripcion := anObject! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:41'!agregarTweet: unTweet	self tweets add: unTweet! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:07'!nombre	^ nombre! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:07'!username	^ username! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 13:17'!= otroUsuario	^self username = otroUsuario username! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:07'!apellido	^ apellido! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:07'!idUser	^ idUser! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:07'!nombre: anObject	nombre := anObject! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:07'!tweets	^ tweets! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:07'!username: anObject	username := anObject! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:07'!tweets: anObject	tweets := anObject! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 15:30'!retweet: unTweet	self agregarTweet: 	(RT rt: unTweet dueño: (self) id: (self tweets)size).! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:07'!apellido: anObject	apellido := anObject! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 01:07'!descripcion	^ descripcion! !!Usuario methodsFor: 'accessing' stamp: 'bys 4/12/2016 15:34'!retweet: unTweet texto: unTexto	self agregarTweet: 	(RT rt: unTweet texto: unTexto dueño: (self) id: (self tweets)size).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'constructores' stamp: 'bys 4/12/2016 01:26'!new: unNombre ap: unApellido username: unUsername desc: unaDescripcion idUs: unID	^self new 	nombre: unNombre;	apellido: unApellido ;	username: unUsername ;	descripcion: unaDescripcion ;	idUser: unID .		! !