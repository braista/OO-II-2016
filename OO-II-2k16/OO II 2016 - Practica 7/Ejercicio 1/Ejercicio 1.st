TestCase subclass: #CajaAhorroTest	instanceVariableNames: 'cajaAhorro'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 7-Ejercicio 1'!!CajaAhorroTest methodsFor: 'testing' stamp: ' 6/5/15 16:10'!testExtraer	self assert: cajaAhorro saldo = 0.	cajaAhorro extraer: 10.	self assert: cajaAhorro saldo = 0.	cajaAhorro depositar: 100.	cajaAhorro extraer: 120.	self assert: cajaAhorro saldo = 100.	cajaAhorro extraer: 20.	self assert: cajaAhorro saldo = 80.	cajaAhorro extraer: 80.	self assert: cajaAhorro saldo = 0.! !!CajaAhorroTest methodsFor: 'testing' stamp: ' 6/5/15 16:10'!testDepositar	self assert: cajaAhorro saldo = 0.	cajaAhorro depositar: 0.	self assert: cajaAhorro saldo = 0.	cajaAhorro depositar: 100.	self assert: cajaAhorro saldo = 100.	cajaAhorro depositar:120.	self assert: cajaAhorro saldo = 220.! !!CajaAhorroTest methodsFor: 'running' stamp: 'bys 6/20/2016 21:20'!setUp	cajaAhorro := CajaAhorro new! !!CajaAhorroTest methodsFor: 'accessing' stamp: ' 6/5/15 16:10'!cajaAhorro: aCuentaBancaria	cajaAhorro := aCuentaBancaria! !!CajaAhorroTest methodsFor: 'accessing' stamp: ' 6/5/15 16:10'!cajaAhorro	^cajaAhorro! !TestCase subclass: #CuentaCorrienteTest	instanceVariableNames: 'sinLimite limiteCien'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 7-Ejercicio 1'!!CuentaCorrienteTest methodsFor: 'testing' stamp: ' 6/5/15 16:09'!testExtraer	self assert: sinLimite saldo = 0.	sinLimite extraer: 10.	self assert: sinLimite saldo = 0.	sinLimite depositar: 100.	sinLimite extraer: 120.	self assert: sinLimite saldo = 100.	sinLimite extraer: 20.	self assert: sinLimite saldo = 80.	sinLimite extraer: 80.	self assert: sinLimite saldo = 0.	self assert: limiteCien saldo = 0.	limiteCien extraer: 10.	self assert: limiteCien saldo = -10.	limiteCien depositar: 100.	self assert: limiteCien saldo = 90.	limiteCien extraer: 220.	self assert: limiteCien saldo = 90.	limiteCien extraer: 190.	self assert: limiteCien saldo = -100.	limiteCien extraer: 190.	self assert: limiteCien saldo = -100.! !!CuentaCorrienteTest methodsFor: 'testing' stamp: ' 6/5/15 16:09'!testDepositar	self assert: sinLimite saldo = 0.	sinLimite depositar: 0.	self assert: sinLimite saldo = 0.	sinLimite depositar: 100.	self assert: sinLimite saldo = 100.	sinLimite depositar:120.	self assert: sinLimite saldo = 220.! !!CuentaCorrienteTest methodsFor: 'accessing' stamp: ' 6/5/15 16:09'!limiteCien	^limiteCien! !!CuentaCorrienteTest methodsFor: 'accessing' stamp: ' 6/5/15 16:09'!sinLimite: aCuentaBancaria	sinLimite := aCuentaBancaria! !!CuentaCorrienteTest methodsFor: 'accessing' stamp: ' 6/5/15 16:09'!sinLimite	^sinLimite! !!CuentaCorrienteTest methodsFor: 'accessing' stamp: ' 6/5/15 16:09'!limiteCien: aCuentaBancaria	limiteCien := aCuentaBancaria! !!CuentaCorrienteTest methodsFor: 'running' stamp: 'bys 6/20/2016 21:22'!setUp	sinLimite := CuentaCorriente new.	limiteCien := CuentaCorriente new.	limiteCien rojoPermitido: 100.! !Object subclass: #CuentaBancaria	instanceVariableNames: 'saldo'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 7-Ejercicio 1'!!CuentaBancaria commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	saldo:		<Object>    Implementation Points!!CuentaBancaria methodsFor: 'accessing' stamp: ' 6/5/15 16:09'!saldo	^saldo! !!CuentaBancaria methodsFor: 'initialize-release' stamp: 'bys 6/20/2016 21:12'!init	saldo:= 0! !!CuentaBancaria methodsFor: 'testing' stamp: 'bys 6/20/2016 21:14'!puedeExtraer:unMonto	^self subclassResponsibility ! !!CuentaBancaria methodsFor: 'operaciones' stamp: ' 6/5/15 16:09'!realizarExtraccion: unMonto	saldo:= saldo - unMonto! !!CuentaBancaria methodsFor: 'operaciones' stamp: ' 6/5/15 16:09'!depositar: unMonto	saldo:= saldo + unMonto.! !!CuentaBancaria methodsFor: 'operaciones' stamp: 'bys 6/20/2016 21:16'!extraer: unMonto	(self puedeExtraer: unMonto)	ifTrue: [ self realizarExtraccion: unMonto]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuentaBancaria class	instanceVariableNames: ''!!CuentaBancaria class methodsFor: 'inicializar' stamp: ' 6/5/15 16:09'!new	^(super new) init! !CuentaBancaria subclass: #CuentaCorriente	instanceVariableNames: 'rojoPermitido'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 7-Ejercicio 1'!!CuentaCorriente commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	rojoPermitido:		<Object>    Implementation Points!!CuentaCorriente methodsFor: 'accessing' stamp: 'bys 6/20/2016 21:10'!rojoPermitido	^rojoPermitido! !!CuentaCorriente methodsFor: 'accessing' stamp: 'bys 6/20/2016 21:24'!puedeExtraer: unMonto	^(self saldo + self rojoPermitido) >= unMonto! !!CuentaCorriente methodsFor: 'accessing' stamp: 'bys 6/20/2016 21:10'!rojoPermitido: aNumber	rojoPermitido := aNumber! !!CuentaCorriente methodsFor: 'accessing' stamp: 'bys 6/20/2016 21:25'!init	super init.	rojoPermitido:= 0! !CuentaBancaria subclass: #CajaAhorro	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 7-Ejercicio 1'!!CajaAhorro commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!CajaAhorro methodsFor: 'consulta' stamp: 'bys 6/20/2016 21:22'!puedeExtraer: unMonto	^self saldo >= unMonto ! !