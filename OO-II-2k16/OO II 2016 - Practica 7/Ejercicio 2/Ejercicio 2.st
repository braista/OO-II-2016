Object subclass: #Sale	instanceVariableNames: 'amount pending'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 7-Ejercicio 2'!!Sale commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	amount:		<Object>	pending:		<Object>    Implementation Points!!Sale methodsFor: 'accessing' stamp: ' 6/5/15 15:55'!pending	^pending! !!Sale methodsFor: 'accessing' stamp: ' 6/5/15 15:55'!setAsCollected	pending := false! !!Sale methodsFor: 'accessing' stamp: ' 6/5/15 15:55'!setAsPending	pending := true! !!Sale methodsFor: 'accessing' stamp: ' 6/5/15 15:55'!collected	^pending not! !!Sale methodsFor: 'accessing' stamp: ' 6/5/15 15:55'!amount	^amount! !!Sale methodsFor: 'accessing' stamp: ' 6/5/15 15:55'!amount: anObject	amount := anObject! !!Sale methodsFor: 'initialize-release' stamp: ' 6/5/15 15:55'!initialize	pending := false.	^self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sale class	instanceVariableNames: ''!!Sale class methodsFor: 'instance creation' stamp: ' 6/5/15 15:55'!for: anAmount 	^(self new)		amount: anAmount;		yourself! !!Sale class methodsFor: 'instance creation' stamp: ' 6/5/15 15:55'!pendingFor: anAmount 	^(self for: anAmount)		setAsPending;		yourself! !!Sale class methodsFor: 'instance creation' stamp: ' 6/5/15 15:55'!new	"Answer a newly created and initialized instance."	^super new initialize! !TestCase subclass: #SalesmanTest	instanceVariableNames: 'smallSale regularSale bigSale smallPendingSale bigPendingSale noSalesSalesman oneSaleSalesman fiveSalesSalesman'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 7-Ejercicio 2'!!SalesmanTest methodsFor: 'testing' stamp: ' 6/5/15 15:58'!testPendingSalesNumber	self assert: noSalesSalesman pendingSalesNumber = 0		description: 'A salesman with no pending sales must return 0 when asked for #pendingSalesNumber'.	self assert: oneSaleSalesman pendingSalesNumber = 1		description: 'A salesman with one pending sales must return 1 when asked for #pendingSalesNumber'.	self assert: fiveSalesSalesman pendingSalesNumber = 2		description: 'A salesman with two pending sales must return 2 when asked for #pendingSalesNumber'.! !!SalesmanTest methodsFor: 'testing' stamp: ' 6/5/15 15:58'!testSalesmanCreation	| john |	john := Salesman named: 'John'.	self assert: john pendingMoney = 0 description: 'A newly created salesman should have 0 pending money'.	self assert: john name = 'John' description: 'A salesman shoul be the same as specified in creation using #named:'.! !!SalesmanTest methodsFor: 'testing' stamp: ' 6/5/15 15:58'!testFiveSalesPendingMoney	self deny: fiveSalesSalesman pendingMoney < 0		description: 'A salesman should never have negative pending money'.	self assert: fiveSalesSalesman pendingMoney = (smallPendingSale amount + bigPendingSale amount)		description: 'Salesman with two pending sales should have pending money equal the sum of both sales amount'.! !!SalesmanTest methodsFor: 'testing' stamp: ' 6/5/15 15:58'!testOneSalePendingMoney	self deny: oneSaleSalesman pendingMoney < 0		description: 'A salesman should never have negative pending money'.	self assert: oneSaleSalesman pendingMoney = smallPendingSale amount		description: 'Salesman with one pending sale should have pending money equal to sale amount'.	oneSaleSalesman addSale: smallSale.	self assert: oneSaleSalesman pendingMoney = smallPendingSale amount		description: 'Salesman with one pending sale should have pending money equal to sale amount'.	oneSaleSalesman addSale: bigPendingSale.	self assert: oneSaleSalesman pendingMoney = (smallPendingSale amount + bigPendingSale amount)		description: 'Salesman with two pending sales should have pending money equal the sum of both sales amount'.! !!SalesmanTest methodsFor: 'testing' stamp: ' 6/5/15 15:58'!testNoSalesPendingMoney	self deny: noSalesSalesman pendingMoney < 0		description: 'A salesman should never have negative pending money'.	self assert: noSalesSalesman pendingMoney = 0		description: 'Salesman with no sales should have 0 pending money'.	noSalesSalesman addSale: smallSale.	self assert: noSalesSalesman pendingMoney = 0		description: 'Salesman with no pending sales should have 0 pending money'.	noSalesSalesman addSale: smallPendingSale.	self assert: noSalesSalesman pendingMoney = smallPendingSale amount		description: 'Salesman with one pending sale should have pending money equal to sale amount'.! !!SalesmanTest methodsFor: 'running' stamp: ' 6/5/15 15:58'!setUp	smallSale := Sale for: 100.	regularSale := Sale for: 500.	bigSale := Sale for: 13400.	smallPendingSale := Sale pendingFor: 110.	bigPendingSale := Sale pendingFor: 12000.	noSalesSalesman := Salesman named: 'George'.	oneSaleSalesman := (Salesman named: 'Paul')				addSale: smallPendingSale;				yourself.	fiveSalesSalesman := (Salesman named: 'Ringo')				addSale: smallSale;				addSale: regularSale;				addSale: bigSale;				addSale: smallPendingSale;				addSale: bigPendingSale;				yourself! !Object subclass: #Salesman	instanceVariableNames: 'name sales'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 7-Ejercicio 2'!!Salesman commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	name:		<Object>	sales:		<Object>    Implementation Points!!Salesman methodsFor: 'accessing' stamp: ' 6/5/15 15:56'!addSale: aSale 	sales add: aSale! !!Salesman methodsFor: 'accessing' stamp: ' 6/5/15 15:56'!sales	^sales! !!Salesman methodsFor: 'accessing' stamp: ' 6/5/15 15:56'!name: aString	name := aString! !!Salesman methodsFor: 'accessing' stamp: ' 6/5/15 15:56'!name	^name! !!Salesman methodsFor: 'sales' stamp: 'bys 6/21/2016 12:04'!pendingSalesNumber	^self pendingSales size! !!Salesman methodsFor: 'sales' stamp: 'bys 6/21/2016 11:47'!pendingSales	"Retorna una coleccion de ventas pendientes"	^(sales select:[:s | s pending])! !!Salesman methodsFor: 'sales' stamp: 'bys 6/21/2016 12:09'!pendingMoney	"Retorna un total del dinero pendiente"	^(self pendingSales inject: 0 into: [ :sum :s | sum + s amount])! !!Salesman methodsFor: 'initialize-release' stamp: ' 6/5/15 15:56'!initialize	sales := OrderedCollection new.	^self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Salesman class	instanceVariableNames: ''!!Salesman class methodsFor: 'instance creation' stamp: ' 6/5/15 15:56'!named: aString 	^(self new)		name: aString;		yourself! !!Salesman class methodsFor: 'instance creation' stamp: ' 6/5/15 15:56'!new	"Answer a newly created and initialized instance."	^super new initialize! !