Object subclass: #UsersParserP5E3	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 3'!!UsersParserP5E3 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!UsersParserP5E3 methodsFor: 'as yet unclassified' stamp: 'bys 6/12/2016 00:43'!parseFrom: aPath		|file next coll|	coll:= Set new.	file:= aPath asFileReference readStream.	[file atEnd]	whileFalse: [ 		next:= (file nextLine)splitOn: ','.			coll add: (UserP5E3 withScreenName: (next at:1) userName: (next at:2))		 ].	^coll! !Object subclass: #TwitterP5E3	instanceVariableNames: 'users'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 3'!!TwitterP5E3 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	users:		<Object>    Implementation Points!!TwitterP5E3 methodsFor: 'accessing' stamp: 'bys 6/11/2016 22:25'!users: anObject	users := anObject! !!TwitterP5E3 methodsFor: 'accessing' stamp: 'bys 6/12/2016 00:48'!withUsers: usersCollection	usersCollection do: [ :user |		self users add: (UserProxyP5E3 with: user)		]! !!TwitterP5E3 methodsFor: 'accessing' stamp: 'bys 6/11/2016 22:25'!users	^ users! !!TwitterP5E3 methodsFor: 'accessing' stamp: 'bys 6/18/2016 23:03'!initialize	users:= OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TwitterP5E3 class	instanceVariableNames: ''!!TwitterP5E3 class methodsFor: 'as yet unclassified' stamp: 'bys 6/11/2016 23:59'!withUsers: usersCollection	^self new withUsers: usersCollection ! !Object subclass: #AbstractUserP5E3	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 3'!!AbstractUserP5E3 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!AbstractUserP5E3 methodsFor: 'accessors' stamp: 'bys 6/18/2016 18:57'!userName	^self subclassResponsibility ! !!AbstractUserP5E3 methodsFor: 'accessors' stamp: 'bys 6/18/2016 18:57'!screenName	^self subclassResponsibility ! !!AbstractUserP5E3 methodsFor: 'accessors' stamp: 'bys 6/18/2016 18:57'!followers	^self subclassResponsibility ! !AbstractUserP5E3 subclass: #UserProxyP5E3	instanceVariableNames: 'user'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 3'!!UserProxyP5E3 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	user:		<Object>    Implementation Points!!UserProxyP5E3 methodsFor: 'accessing' stamp: 'bys 6/18/2016 23:08'!followers	|retriever line|	retriever:= LineRetriever on: '\Pharo4.0\OO-II-2k16\OO II 2016 - Practica 5\Ejercicio 3\twitter-users.csv'.	line:= (retriever retrieveLineStartingWith: (self screenName))findTokens: $,.	(line size <= 2)	ifFalse: [ ^line removeLast: (line size - 2)		 ]	! !!UserProxyP5E3 methodsFor: 'accessing' stamp: 'bys 6/12/2016 00:48'!user: anObject	user := anObject! !!UserProxyP5E3 methodsFor: 'accessing' stamp: 'bys 6/12/2016 00:49'!doesNotUnderstand: aMessage	^ super doesNotUnderstand: aMessage! !!UserProxyP5E3 methodsFor: 'accessing' stamp: 'bys 6/12/2016 00:55'!screenName	^self user screenName ! !!UserProxyP5E3 methodsFor: 'accessing' stamp: 'bys 6/12/2016 00:48'!user	^ user! !!UserProxyP5E3 methodsFor: 'accessing' stamp: 'bys 6/18/2016 22:50'!userName	^self user userName ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UserProxyP5E3 class	instanceVariableNames: ''!!UserProxyP5E3 class methodsFor: 'as yet unclassified' stamp: 'bys 6/12/2016 00:48'!with: user	^self new user: user! !AbstractUserP5E3 subclass: #UserP5E3	instanceVariableNames: 'screenName userName followers'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 3'!!UserP5E3 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!UserP5E3 methodsFor: 'accessing' stamp: 'bys 6/18/2016 18:49'!followers	^ followers! !!UserP5E3 methodsFor: 'accessing' stamp: 'bys 6/18/2016 18:49'!screenName: anObject	screenName := anObject! !!UserP5E3 methodsFor: 'accessing' stamp: 'bys 6/18/2016 18:49'!followers: anObject	followers := anObject! !!UserP5E3 methodsFor: 'accessing' stamp: 'bys 6/18/2016 18:49'!screenName	^ screenName! !!UserP5E3 methodsFor: 'accessing' stamp: 'bys 6/18/2016 18:49'!userName: anObject	userName := anObject! !!UserP5E3 methodsFor: 'accessing' stamp: 'bys 6/18/2016 18:49'!userName	^ userName! !!UserP5E3 methodsFor: 'as yet unclassified' stamp: 'bys 6/12/2016 00:52'!initialize	followers:= Set new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UserP5E3 class	instanceVariableNames: ''!!UserP5E3 class methodsFor: 'as yet unclassified' stamp: 'bys 6/18/2016 22:46'!withScreenName: sname userName: uname	^self new screenName: sname; userName: uname! !