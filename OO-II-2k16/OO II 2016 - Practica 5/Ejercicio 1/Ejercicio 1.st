Object subclass: #FileManagerOO2	instanceVariableNames: 'files'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 1'!!FileManagerOO2 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	files:		<Object>    Implementation Points!!FileManagerOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 03:12'!initialize	files:= Set new! !!FileManagerOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:38'!files: anObject	files := anObject! !!FileManagerOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:38'!files	^ files! !!FileManagerOO2 methodsFor: 'manage' stamp: 'bys 6/18/2016 02:40'!addFile: aFile	"Agrega el archivo a la coleccion de archivos del File Manager."	self files add: aFile ! !!FileManagerOO2 methodsFor: 'manage' stamp: 'bys 6/18/2016 03:12'!prettyPrint: aFile	"Imprime los datos del archivo segun los decoradores usados."	|string|	string:= aFile prettyPrint.	^(string)copyFrom: 4 to: (string size)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FileManagerOO2 class	instanceVariableNames: ''!!FileManagerOO2 class methodsFor: 'constructor' stamp: 'bys 6/18/2016 02:37'!withFiles: filesCollection	^self new files: filesCollection ! !Object subclass: #AbstractFileOO2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 1'!!AbstractFileOO2 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!AbstractFileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:53'!creationDate: anObject	^self subclassResponsibility ! !!AbstractFileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:53'!extension: anObject	^self subclassResponsibility ! !!AbstractFileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:53'!size: anObject	^self subclassResponsibility ! !!AbstractFileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:53'!name: anObject	^self subclassResponsibility ! !!AbstractFileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:53'!permissions: anObject	^self subclassResponsibility ! !!AbstractFileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:53'!permissions	^self subclassResponsibility ! !!AbstractFileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:53'!extension	^self subclassResponsibility ! !!AbstractFileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:53'!name	^self subclassResponsibility ! !!AbstractFileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:53'!creationDate	^self subclassResponsibility ! !!AbstractFileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:53'!modDate: anObject	^self subclassResponsibility ! !!AbstractFileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:53'!modDate	^self subclassResponsibility ! !!AbstractFileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:53'!size	^self subclassResponsibility ! !AbstractFileOO2 subclass: #FileOO2	instanceVariableNames: 'name extension size creationDate modDate permissions'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 1'!!FileOO2 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	creationDate:		<Object>	extension:		<Object>	modDate:		<Object>	name:		<Object>	permissions:		<Object>	size:		<Object>    Implementation Points!!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:59'!extension: anObject	extension := anObject! !!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:55'!size: anObject	size := anObject! !!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:00'!creationDate: anObject	creationDate := anObject! !!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:55'!name: anObject	name := anObject! !!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:55'!permissions: anObject	permissions := anObject! !!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:20'!prettyPrint	^''! !!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:55'!permissions	^ permissions! !!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:54'!name	^ name! !!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:00'!extension	^ extension! !!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:59'!modDate: anObject	modDate := anObject! !!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:00'!creationDate	^ creationDate! !!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:55'!size	^ size! !!FileOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 01:59'!modDate	^ modDate! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FileOO2 class	instanceVariableNames: ''!!FileOO2 class methodsFor: 'as yet unclassified' stamp: 'bys 6/18/2016 02:10'!withName: aName extension: ext size: size cDate: aCDate mDate: aMDate perm: permissions	^self new name: aName; extension: ext; size: size; creationDate: aCDate; modDate: aMDate; permissions: permissions! !AbstractFileOO2 subclass: #FileDecoratorOO2	instanceVariableNames: 'file'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 1'!!FileDecoratorOO2 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	file:		<Object>    Implementation Points!!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:25'!extension: anObject	self shouldBeImplemented! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:25'!creationDate: anObject	self shouldBeImplemented! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:25'!size: anObject	self shouldBeImplemented! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:25'!permissions: anObject	self shouldBeImplemented! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:25'!name: anObject	self shouldBeImplemented! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:26'!permissions	^self file permissions! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:25'!extension	^self file extension ! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:26'!name	^self file name! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:25'!modDate: anObject	self shouldBeImplemented! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:25'!creationDate	^self file creationDate ! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:06'!file	^ file! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:26'!modDate	^self file modDate ! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:06'!file: anObject	file := anObject! !!FileDecoratorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:26'!size	^self file size! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FileDecoratorOO2 class	instanceVariableNames: ''!!FileDecoratorOO2 class methodsFor: 'constructor' stamp: 'bys 6/18/2016 02:13'!withFile: aFile	^self new file: aFile! !FileDecoratorOO2 subclass: #NameDecorator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 1'!!NameDecorator commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!NameDecorator methodsFor: 'accessing' stamp: 'bys 6/18/2016 02:32'!prettyPrint	^self file prettyPrint,' - ', self name! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NameDecorator class	instanceVariableNames: ''!!NameDecorator class methodsFor: 'constructor' stamp: 'bys 6/18/2016 02:13'!withFile: aFile	^super withFile: aFile! !FileDecoratorOO2 subclass: #PermissionsDecorator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 1'!!PermissionsDecorator commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PermissionsDecorator methodsFor: 'as yet unclassified' stamp: 'bys 6/18/2016 02:35'!prettyPrint	^self file prettyPrint,' - ', self permissions ! !FileDecoratorOO2 subclass: #CreationDateDecorator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 1'!!CreationDateDecorator commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!CreationDateDecorator methodsFor: 'as yet unclassified' stamp: 'bys 6/18/2016 02:34'!prettyPrint	^self file prettyPrint,' - ', self creationDate! !FileDecoratorOO2 subclass: #SizeDecorator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 1'!!SizeDecorator commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!SizeDecorator methodsFor: 'as yet unclassified' stamp: 'bys 6/18/2016 02:34'!prettyPrint	^self file prettyPrint,' - ', self size! !FileDecoratorOO2 subclass: #ModificationDateDecorator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 1'!!ModificationDateDecorator commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!ModificationDateDecorator methodsFor: 'as yet unclassified' stamp: 'bys 6/18/2016 02:35'!prettyPrint	^self file prettyPrint,' - ', self modDate ! !FileDecoratorOO2 subclass: #ExtensionDecorator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 1'!!ExtensionDecorator commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!ExtensionDecorator methodsFor: 'accesing' stamp: 'bys 6/18/2016 02:32'!prettyPrint	^self file prettyPrint,' - ', self extension! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ExtensionDecorator class	instanceVariableNames: ''!!ExtensionDecorator class methodsFor: 'constructor' stamp: 'bys 6/18/2016 02:22'!withFile: aFile	^super withFile: aFile! !