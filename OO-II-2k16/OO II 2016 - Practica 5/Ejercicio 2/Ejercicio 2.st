Object subclass: #Broker	instanceVariableNames: 'stations'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 2'!!Broker commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	stations:		<Object>    Implementation Points!!Broker methodsFor: 'initialize' stamp: 'ArturoZambrano 4/24/2016 14:33'!initialize stations:=Dictionary new.! !!Broker methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 4/24/2016 14:43'!send: aSymbol to: anObjectReference ^(stations at: anObjectReference ) perform: aSymbol ! !!Broker methodsFor: 'manage' stamp: 'bys 6/18/2016 14:53'!addStation:aWeatherStation stations at: aWeatherStation name put: aWeatherStation ! !Object subclass: #SensorOO2	instanceVariableNames: 'stations'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 2'!!SensorOO2 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	stations:		<Object>    Implementation Points!!SensorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 17:02'!initialize	stations:= Set new! !!SensorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 17:09'!averageTemperature	"Retorna la temperatura promedio de las estaciones."	^(self stations inject: 0 into: [ :sum :station | sum + (station temperature)])// self stations size! !!SensorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 17:22'!maxuvRadiation	"Retorna la radiación UV máxima."	^(self stations asSortedCollection: [ :st1 :st2 | st1 uvRadiation > st2 uvRadiation ])first uvRadiation! !!SensorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 17:03'!stations	^stations! !!SensorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 16:13'!stations: anObject	stations := anObject! !!SensorOO2 methodsFor: 'accessing' stamp: 'bys 6/18/2016 16:55'!addStation: aStation	"Agrega una estacion con su respectivo decorador"	self stations add: (StationDecorator withStation: aStation)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SensorOO2 class	instanceVariableNames: ''!!SensorOO2 class methodsFor: 'constructor' stamp: 'bys 6/18/2016 16:30'!withStations: stationCollection	"Constructor"	|sensor|	sensor:= SensorOO2 new.	stationCollection do: [ :station | sensor stations add: (StationDecorator withStation: station) ].	^sensor! !Object subclass: #AbstractStation	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 2'!!AbstractStation commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!AbstractStation methodsFor: 'accessors' stamp: 'bys 6/18/2016 16:35'!humidity	^self subclassResponsibility ! !!AbstractStation methodsFor: 'accessors' stamp: 'bys 6/18/2016 16:37'!uvRadiation	^self subclassResponsibility ! !!AbstractStation methodsFor: 'accessors' stamp: 'bys 6/18/2016 17:14'!brokerWithStation: aStation	"Retorna una instancia de Broker con una estacion en especifica"	^Broker n! !!AbstractStation methodsFor: 'accessors' stamp: 'bys 6/18/2016 16:36'!name	^self subclassResponsibility ! !!AbstractStation methodsFor: 'accessors' stamp: 'bys 6/18/2016 16:36'!temperature	^self subclassResponsibility ! !AbstractStation subclass: #StationDecorator	instanceVariableNames: 'station'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 2'!!StationDecorator commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	station:		<Object>    Implementation Points!!StationDecorator methodsFor: 'accessors' stamp: 'bys 6/18/2016 17:16'!humidity	^(Broker new addStation: self station) send: #humidity to: self station name! !!StationDecorator methodsFor: 'accessors' stamp: 'bys 6/18/2016 17:16'!uvRadiation	^(Broker new addStation: self station)send: #uvRadiation to: self station name! !!StationDecorator methodsFor: 'accessors' stamp: 'bys 6/18/2016 17:17'!name	^(Broker new addStation: self station)send: #name to: self station name! !!StationDecorator methodsFor: 'accessors' stamp: 'bys 6/18/2016 17:15'!temperature	^(Broker new addStation: self station)send: #temperature to: self station name! !!StationDecorator methodsFor: 'accessing' stamp: 'bys 6/18/2016 16:11'!station: anObject	station := anObject! !!StationDecorator methodsFor: 'accessing' stamp: 'bys 6/18/2016 16:11'!station	^ station! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StationDecorator class	instanceVariableNames: ''!!StationDecorator class methodsFor: 'constructor' stamp: 'bys 6/18/2016 16:21'!withStation: aStation	^self new station: aStation ! !AbstractStation subclass: #WeatherStation	instanceVariableNames: 'random name'	classVariableNames: ''	poolDictionaries: ''	category: 'OO II 2016 - Practica 5-Ejercicio 2'!!WeatherStation commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	name:		<Object>	random:		<Object>    Implementation Points!!WeatherStation methodsFor: 'accessing' stamp: 'ArturoZambrano 4/24/2016 14:34'!name: anObject	name := anObject! !!WeatherStation methodsFor: 'accessing' stamp: 'ArturoZambrano 4/24/2016 14:34'!name	^ name! !!WeatherStation methodsFor: 'sensing' stamp: 'ArturoZambrano 4/24/2016 14:47'!humidity thisContext sender receiver class=Broker ifFalse:[self error: 'Only a Broker can talk to a Station' ]. ^ random nextInt:100! !!WeatherStation methodsFor: 'sensing' stamp: 'ArturoZambrano 4/24/2016 14:30'!uvRadiation ^ random nextInt:40 ! !!WeatherStation methodsFor: 'sensing' stamp: 'ArturoZambrano 4/24/2016 14:30'!temperature ^ random nextInt:50! !!WeatherStation methodsFor: 'initialization-release' stamp: 'ArturoZambrano 4/24/2016 14:30'!initialize  random:= Random new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WeatherStation class	instanceVariableNames: ''!!WeatherStation class methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 4/24/2016 14:42'!named: aString ^self new name:aString; yourself.! !